"use strict";(self.webpackChunknarrative_docs=self.webpackChunknarrative_docs||[]).push([[1418],{84437:(e,i,n)=>{n.r(i),n.d(i,{assets:()=>l,contentTitle:()=>r,default:()=>u,frontMatter:()=>o,metadata:()=>s,toc:()=>c});var t=n(74848),a=n(28453);const o={sidebar_label:"Creating new Abilities"},r="Creating new Abilities",s={id:"pro/abilities/creating-new-abilities",title:"Creating new Abilities",description:"At some point you are going to want to create your own abilities for your game. This could be something to replace built in abilities, making a new plugin work or adding some functionality you want in your game.",source:"@site/docs/pro/abilities/creating-new-abilities.md",sourceDirName:"pro/abilities",slug:"/pro/abilities/creating-new-abilities",permalink:"/pro/abilities/creating-new-abilities",draft:!1,unlisted:!1,tags:[],version:"current",frontMatter:{sidebar_label:"Creating new Abilities"},sidebar:"tutorialSidebar",previous:{title:"Abilities",permalink:"/pro/abilities/"},next:{title:"Default Abilities",permalink:"/pro/abilities/default-abilities"}},l={},c=[{value:"Creating new input",id:"creating-new-input",level:2},{value:"C++ input",id:"c-input",level:2},{value:"Blueprint input",id:"blueprint-input",level:2},{value:"Creating the ability",id:"creating-the-ability",level:2}];function d(e){const i={a:"a",admonition:"admonition",code:"code",h1:"h1",h2:"h2",header:"header",p:"p",...(0,a.R)(),...e.components};return(0,t.jsxs)(t.Fragment,{children:[(0,t.jsx)(i.header,{children:(0,t.jsx)(i.h1,{id:"creating-new-abilities",children:"Creating new Abilities"})}),"\n",(0,t.jsx)(i.p,{children:"At some point you are going to want to create your own abilities for your game. This could be something to replace built in abilities, making a new plugin work or adding some functionality you want in your game."}),"\n",(0,t.jsx)(i.p,{children:"Depending on what you want to do it can be an easy process."}),"\n",(0,t.jsx)(i.p,{children:"The key thing to remember, is if you can code the functionality in Blueprints / C++, you can convert it to a Gameplay Ability."}),"\n",(0,t.jsx)(i.h2,{id:"creating-new-input",children:"Creating new input"}),"\n",(0,t.jsxs)(i.p,{children:["You might be able to re-use one of the existing keys in the game. If you are able to use an existing one, you can move to the ",(0,t.jsx)(i.a,{href:"/pro/abilities/creating-new-abilities#creating-the-ability",children:"next step"}),"."]}),"\n",(0,t.jsx)(i.p,{children:"There are two methods of creating new input, C++ and Blueprints. C++ is the preferred method simply because it keeps everything inline. Both methods are completely okay to use so pick which you are comfortable with."}),"\n",(0,t.jsx)(i.h2,{id:"c-input",children:"C++ input"}),"\n",(0,t.jsxs)(i.p,{children:["To add new input via C++, open the file ",(0,t.jsx)(i.code,{children:"NarrativeArsenal.h"}),"."]}),"\n",(0,t.jsxs)(i.p,{children:["Inside this file you will see an enum called ",(0,t.jsx)(i.code,{children:"ENarrativeAbilityInputID"}),"."]}),"\n",(0,t.jsx)(i.p,{children:"This stores a list of inputs available to GAS. Add a named input just below this line."}),"\n",(0,t.jsx)(i.admonition,{type:"note",children:(0,t.jsxs)(i.p,{children:["If you make the name generic instead of specific, you can reuse it in other areas if you need to. E.g. ",(0,t.jsx)(i.code,{children:"Ability1"})," instead of ",(0,t.jsx)(i.code,{children:"Fireball"}),"."]})}),"\n",(0,t.jsx)(i.h2,{id:"blueprint-input",children:"Blueprint input"}),"\n",(0,t.jsx)(i.p,{children:"Adding input via Blueprints is different in a sense that you re-route how the ability is started."}),"\n",(0,t.jsxs)(i.p,{children:["Find your inputs folder and create a new ",(0,t.jsx)(i.a,{href:"https://dev.epicgames.com/documentation/en-us/unreal-engine/enhanced-input-in-unreal-engine",children:"Enhanced Input Action"}),"."]}),"\n",(0,t.jsx)(i.p,{children:"Now find your Input Mapping Context and add your input into it, binding the keys that you want to use with it."}),"\n",(0,t.jsx)(i.p,{children:"Open your player controller (or pawn depending on your games design), add your new input event into here."}),"\n",(0,t.jsxs)(i.p,{children:["Get the ability system component for this player then choose ",(0,t.jsx)(i.a,{href:"https://github.com/tranek/GASDocumentation?tab=readme-ov-file#concepts-ga-activating",children:"TryActivateAbilityByClass"}),"."]}),"\n",(0,t.jsx)(i.p,{children:"In the next steps, we will create the ability, you need to come back to this moment and update the class to your Ability."}),"\n",(0,t.jsx)(i.h2,{id:"creating-the-ability",children:"Creating the ability"})]})}function u(e={}){const{wrapper:i}={...(0,a.R)(),...e.components};return i?(0,t.jsx)(i,{...e,children:(0,t.jsx)(d,{...e})}):d(e)}},28453:(e,i,n)=>{n.d(i,{R:()=>r,x:()=>s});var t=n(96540);const a={},o=t.createContext(a);function r(e){const i=t.useContext(o);return t.useMemo((function(){return"function"==typeof e?e(i):{...i,...e}}),[i,e])}function s(e){let i;return i=e.disableParentContext?"function"==typeof e.components?e.components(a):e.components||a:r(e.components),t.createElement(o.Provider,{value:i},e.children)}}}]);