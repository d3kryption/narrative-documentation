"use strict";(self.webpackChunknarrative_docs=self.webpackChunknarrative_docs||[]).push([[6622],{28453:(e,n,a)=>{a.d(n,{R:()=>o,x:()=>i});var t=a(96540);const r={},d=t.createContext(r);function o(e){const n=t.useContext(d);return t.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function i(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(r):e.components||r:o(e.components),t.createElement(d.Provider,{value:n},e.children)}},55209:(e,n,a)=>{a.r(n),a.d(n,{assets:()=>s,contentTitle:()=>i,default:()=>p,frontMatter:()=>o,metadata:()=>t,toc:()=>l});const t=JSON.parse('{"id":"tales/changelog/version-3.6.0","title":"3.6.0 Code Changes","description":"Some files simply have been reordered, but functionally, they make no difference. These changes have not been included.","source":"@site/docs/tales/changelog/version-3.6.0.md","sourceDirName":"tales/changelog","slug":"/tales/changelog/version-3.6.0","permalink":"/tales/changelog/version-3.6.0","draft":false,"unlisted":false,"tags":[],"version":"current","frontMatter":{"sidebar_label":"3.6.0 Code Changes"},"sidebar":"tutorialSidebar","previous":{"title":"Changelog","permalink":"/tales/changelog/"},"next":{"title":"Conditions","permalink":"/tales/conditions/"}}');var r=a(74848),d=a(28453);const o={sidebar_label:"3.6.0 Code Changes"},i="3.6.0 Code Changes",s={},l=[{value:"DialogueAssetFactory.cpp",id:"dialogueassetfactorycpp",level:3},{value:"DialogueGraphSchema.h",id:"dialoguegraphschemah",level:3},{value:"DialogueGraphNode_NPC.cpp",id:"dialoguegraphnode_npccpp",level:3},{value:"DialogueEditorDetails.cpp",id:"dialogueeditordetailscpp",level:3},{value:"DialogueGraphSchema.cpp",id:"dialoguegraphschemacpp",level:3},{value:"DialogueGraph.cpp",id:"dialoguegraphcpp",level:3},{value:"DialogueConnectionDrawingPolicy.cpp",id:"dialogueconnectiondrawingpolicycpp",level:3},{value:"DialogueGraphEditor.cpp",id:"dialoguegrapheditorcpp",level:3},{value:"DialogueBlueprintCompiler.cpp",id:"dialogueblueprintcompilercpp",level:3},{value:"QuestGraphSchema.h",id:"questgraphschemah",level:3},{value:"QuestGraphSchema.cpp",id:"questgraphschemacpp",level:3},{value:"QuestAssetFactory.cpp",id:"questassetfactorycpp",level:3},{value:"NarrativeQuestEditorModule.cpp",id:"narrativequesteditormodulecpp",level:3},{value:"QuestEditorSettings.cpp",id:"questeditorsettingscpp",level:3},{value:"QuestBlueprintCompiler.cpp",id:"questblueprintcompilercpp",level:3},{value:"SQuestGraphNode.cpp",id:"squestgraphnodecpp",level:3},{value:"QuestGraphEditor.cpp",id:"questgrapheditorcpp",level:3},{value:"QuestEditorSettings.h",id:"questeditorsettingsh",level:3},{value:"DialogueAsset.cpp",id:"dialogueassetcpp",level:3},{value:"DialogueBlueprintGeneratedClass.cpp",id:"dialogueblueprintgeneratedclasscpp",level:3},{value:"Quest.cpp",id:"questcpp",level:3},{value:"DialogueSM.cpp",id:"dialoguesmcpp",level:3},{value:"QuestSM.cpp",id:"questsmcpp",level:3},{value:"NarrativePartyComponent.cpp",id:"narrativepartycomponentcpp",level:3},{value:"Dialogue.cpp",id:"dialoguecpp",level:3},{value:"QuestBlueprintGeneratedClass.cpp",id:"questblueprintgeneratedclasscpp",level:3},{value:"QuestTask.cpp",id:"questtaskcpp",level:3},{value:"NarrativeNodeBase.cpp",id:"narrativenodebasecpp",level:3},{value:"NarrativeDialogueSequence.cpp",id:"narrativedialoguesequencecpp",level:3},{value:"NarrativeFunctionLibrary.cpp",id:"narrativefunctionlibrarycpp",level:3},{value:"NarrativeComponent.cpp",id:"narrativecomponentcpp",level:3},{value:"NarrativeEvent.cpp",id:"narrativeeventcpp",level:3},{value:"Dialogue.h",id:"dialogueh",level:3},{value:"NarrativeEvent.h",id:"narrativeeventh",level:3},{value:"DialogueSM.h",id:"dialoguesmh",level:3},{value:"Quest.h",id:"questh",level:3},{value:"QuestTask.h",id:"questtaskh",level:3},{value:"DialogueBlueprintGeneratedClass.h",id:"dialogueblueprintgeneratedclassh",level:3},{value:"NarrativePartyComponent.h",id:"narrativepartycomponenth",level:3},{value:"NarrativeComponent.h",id:"narrativecomponenth",level:3},{value:"NarrativeDialogueSequence.h",id:"narrativedialoguesequenceh",level:3}];function u(e){const n={admonition:"admonition",code:"code",h1:"h1",h3:"h3",header:"header",p:"p",pre:"pre",strong:"strong",...(0,d.R)(),...e.components};return(0,r.jsxs)(r.Fragment,{children:[(0,r.jsx)(n.header,{children:(0,r.jsx)(n.h1,{id:"360-code-changes",children:"3.6.0 Code Changes"})}),"\n",(0,r.jsx)(n.admonition,{type:"note",children:(0,r.jsxs)(n.p,{children:["Some files simply have been reordered, but functionally, they make no difference. These changes have ",(0,r.jsx)(n.strong,{children:"not"})," been included."]})}),"\n",(0,r.jsx)(n.h3,{id:"dialogueassetfactorycpp",children:"DialogueAssetFactory.cpp"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-cpp",metastring:'title="/NarrativeDialogueEditor/Private/DialogueAssetFactory.cpp" showLineNumbers',children:"\n...\n\n// removed-start\n        //Generally we would never want the parent classes speakers to inherit down into child classes\n        DialogueCDO->Speakers.Empty();\n// removed-end\n// added-start\n        ////Generally we would never want the parent classes speakers to inherit down into child classes\n        //DialogueCDO->Speakers.Empty();\n// added-end\n\n// removed-start\n        FString NameString = DialogueBP->GetFName().ToString();\n// removed-end\n// added-start\n        //FString NameString = DialogueBP->GetFName().ToString();\n// added-end\n\n// removed-start\n        //Add the Default Speaker to the dialogue \n        FSpeakerInfo DefaultSpeaker;\n        int32 UnderscoreIndex = -1;\n// removed-end\n// added-start\n        ////Add the Default Speaker to the dialogue \n        //FSpeakerInfo DefaultSpeaker;\n        //int32 UnderscoreIndex = -1;\n// added-end\n\n// removed-start\n        if (NameString.FindChar(TCHAR('_'), UnderscoreIndex))\n        {\n            //remove D_SpeakerName prefix \n            DefaultSpeaker.SpeakerID = FName(NameString.RightChop(UnderscoreIndex + 1));\n        }\n        else\n        {\n            DefaultSpeaker.SpeakerID = FName(NameString);\n        }\n// removed-end\n// added-start\n        //if (NameString.FindChar(TCHAR('_'), UnderscoreIndex))\n        //{\n        //\t//remove D_SpeakerName prefix \n        //\tDefaultSpeaker.SpeakerID = FName(NameString.RightChop(UnderscoreIndex + 1));\n        //}\n        //else\n        //{\n        //\tDefaultSpeaker.SpeakerID = FName(NameString);\n        //}\n// added-end\n\n...\n\n// removed-start\n        DialogueCDO->Speakers.Add(DefaultSpeaker);\n// removed-end\n// added-start\n        //DialogueCDO->Speakers.Add(DefaultSpeaker);\n// added-end\n    }\n}\n\n\n\n"})}),"\n",(0,r.jsx)(n.h3,{id:"dialoguegraphschemah",children:"DialogueGraphSchema.h"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-cpp",metastring:'title="/NarrativeDialogueEditor/Private/DialogueGraphSchema.h" showLineNumbers',children:"\n...\n\n/** Template of node we want to create */\nUPROPERTY()\n// removed-start\nclass UDialogueGraphNode* NodeTemplate;\n// removed-end\n// added-start\nTObjectPtr<class UDialogueGraphNode> NodeTemplate;\n// added-end\n\n...\n\n\n\n"})}),"\n",(0,r.jsx)(n.h3,{id:"dialoguegraphnode_npccpp",children:"DialogueGraphNode_NPC.cpp"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-cpp",metastring:'title="/NarrativeDialogueEditor/Private/DialogueGraphNode_NPC.cpp" showLineNumbers',children:"\n...\n\n    {\n        if (UDialogueNode_NPC* NPCNode = Cast<UDialogueNode_NPC>(DialogueNode))\n        {\n// removed-start\n            return DialogueCDO->GetSpeaker(NPCNode->SpeakerID).NodeColor;\n// removed-end\n// added-start\n            return DialogueCDO->GetSpeaker(NPCNode->GetSpeakerID()).NodeColor;\n// added-end\n\n...\n\n// removed-start\n            return FText::FromName(DialogueCDO->GetSpeaker(NPCNode->SpeakerID).SpeakerID);\n// removed-end\n// added-start\n            return FText::FromName(DialogueCDO->GetSpeaker(NPCNode->GetSpeakerID()).SpeakerID);\n// added-end\n        }\n    }\n}\n\n\n"})}),"\n",(0,r.jsx)(n.h3,{id:"dialogueeditordetailscpp",children:"DialogueEditorDetails.cpp"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-cpp",metastring:'title="/NarrativeDialogueEditor/Private/DialogueEditorDetails.cpp" showLineNumbers',children:'\n#include "DialogueEditorDetails.h"\n#include "DetailLayoutBuilder.h"\n#include "Dialogue.h"\n// added-start\n#include "DialogueSM.h"\n// added-end\n\n...\n\n// removed-start\n#include "DialogueSM.h"\n// removed-end\n#include "Widgets/Input/SComboBox.h"\n#include "IPropertyUtilities.h"\n\n\n...\n\n// removed-start\n            return FText::FromName(NPCNode->SpeakerID);\n// removed-end\n// added-start\n            return FText::FromName(NPCNode->GetSpeakerID());\n// added-end\n        }\n    }\n}\n\n...\n\n// removed-start\n            NPCNode->SpeakerID = FName(NewSelection->ToString());\n// removed-end\n// added-start\n            NPCNode->SetSpeakerID(FName(NewSelection->ToString()));\n// added-end\n        }\n    }\n}\n\n...\n\n// removed-start\n\n        if (UDialogueBlueprint* DialogueBP = Cast<UDialogueBlueprint>(NPCNode->OwningDialogue->GetOuter()))\n        {\n            if (UDialogue* DialogueCDO = Cast<UDialogue>(DialogueBP->GeneratedClass->GetDefaultObject()))\n            {\n\n                for (const auto& Speaker : DialogueCDO->Speakers)\n                {\n                    SpeakersList.Add(MakeShareable(new FText(FText::FromName(Speaker.SpeakerID))));\n\n                    if (Speaker.SpeakerID == NPCNode->SpeakerID)\n                    {\n                        SelectedItem = SpeakersList.Last();\n                    }\n                }\n\n                FText RowText = LOCTEXT("SpeakerIDLabel", "Speaker");\n\n                //Add a button to make the quest designer more simplified \n                FDetailWidgetRow& Row = Category.AddCustomRow(GroupLabel)\n                    .NameContent()\n                    [\n                        SNew(STextBlock)\n                        .Font(FCoreStyle::GetDefaultFontStyle("Regular", 8))\n                    .Text(RowText)\n                    ]\n                .ValueContent()\n                    [\n                        SNew(SComboBox<TSharedPtr<FText>>)\n                        .OptionsSource(&SpeakersList)\n                    .OnSelectionChanged(this, &FDialogueEditorDetails::OnSelectionChanged)\n                    .InitiallySelectedItem(SelectedItem)\n                    .OnGenerateWidget_Lambda([](TSharedPtr<FText> Option)\n                        {\n                            return SNew(STextBlock)\n                                .Font(FCoreStyle::GetDefaultFontStyle("Regular", 8))\n                                .Text(*Option);\n                        })\n                    [\n                        SNew(STextBlock)\n                        .Font(FCoreStyle::GetDefaultFontStyle("Regular", 8))\n                            .Text(this, &FDialogueEditorDetails::GetSpeakerText)\n                    ]\n                    ];\n            }\n        }\n// removed-end\n    }\n// removed-start\n    //else if (UDialogue* DialogueCDO = Cast<UDialogue>(EditedObjects[0]))\n    //{\n    //\t//Add a button to make the quest designer more simplified \n    //\tCategory.AddCustomRow(GroupLabel)\n    //\t\t.ValueContent()\n    //\t\t[\n    //\t\t\tSNew(SButton)\n    //\t\t\t.ButtonStyle(FAppStyle::Get(), "RoundButton")\n    //\t\t.OnClicked(this, &FDialogueEditorDetails::SetTransformsFromActorSelection)\n    //\t\t[\n    //\t\t\tSNew(STextBlock)\n    //\t\t\t.Font(IDetailLayoutBuilder::GetDetailFontBold())\n    //\t\t\t.ToolTipText(LOCTEXT("SetSpeakerTransformsTooltip", "")\n    //\t\t\tLOCTEXT("SetSpeakerTransforms", "Set Speaker Transforms From Selection"))\n    //\t\t]\n    //\t\t];\n    //}\n// removed-end\n}\n}\n\n...\n\n// removed-start\n#undef LOCTEXT_NAMESPACE// removed-end\n// added-start\n#undef LOCTEXT_NAMESPACE\n// added-end\n\n\n'})}),"\n",(0,r.jsx)(n.h3,{id:"dialoguegraphschemacpp",children:"DialogueGraphSchema.cpp"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-cpp",metastring:'title="/NarrativeDialogueEditor/Private/DialogueGraphSchema.cpp" showLineNumbers',children:'\n#include "Framework/Commands/UIAction.h"\n#include "Framework/MultiBox/MultiBoxBuilder.h"\n#include "EdGraphNode_Comment.h"\n// removed-start\n#include "IDialogueEditor.h"\n// removed-end\n\n...\n\n// removed-start\n#include "Toolkits/ToolkitManager.h"\n// removed-end\n#include "DialogueConnectionDrawingPolicy.h"\n#include "DialogueGraph.h"\n// removed-start\n#include "GraphEditorActions.h"\n#include "Framework/Commands/GenericCommands.h"\n#include "DialogueEditorCommands.h"\n#include "AssetRegistry/AssetRegistryModule.h"\n#include "DialogueSM.h"\n// removed-end\n#include "DialogueGraphNode_NPC.h"\n// added-start\n#include "Dialogue.h"\n#include "DialogueSM.h"\n// added-end\n\n...\n\n// removed-start\n            NPCNode->SpeakerID = SpeakerInfo.SpeakerID;\n// removed-end\n// added-start\n            NPCNode->SetSpeakerID(SpeakerInfo.GetSpeakerID());\n// added-end\n        }\n    }\n\n\n...\n\n// removed-start\n#undef LOCTEXT_NAMESPACE// removed-end\n// added-start\n#undef LOCTEXT_NAMESPACE\n// added-end\n\n\n'})}),"\n",(0,r.jsx)(n.h3,{id:"dialoguegraphcpp",children:"DialogueGraph.cpp"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-cpp",metastring:'title="/NarrativeDialogueEditor/Private/DialogueGraph.cpp" showLineNumbers',children:'\n\n#include "DialogueGraph.h"\n#include "Dialogue.h"\n// added-start\n#include "NarrativeFunctionLibrary.h"\n#include "NarrativeComponent.h"\n#include "DialogueSM.h"\n#include "QuestSM.h"\n// added-end\n\n...\n\n// removed-start\n#include "QuestSM.h"\n// removed-end\n#include "Editor/UnrealEd/Public/Editor.h"\n// removed-start\n#include "NarrativeFunctionLibrary.h"\n#include "NarrativeComponent.h"\n#include <DialogueSM.h>\n// removed-end\n#include "DialogueGraphNode_Player.h"\n#include "DialogueEditorSettings.h"\n\n...\n\n// removed-start\n            if (DialogueCDO->Speakers.IsValidIndex(0))\n            {\n                RootNode->Line.Text = FText::Format(LOCTEXT("DefaultRootNodeText", "Hi there, i\'m {0}."), FText::FromString(DialogueCDO->Speakers[0].SpeakerID.ToString()));\n                RootNode->SpeakerID = DialogueCDO->Speakers[0].SpeakerID;\n            }\n// removed-end\n// added-start\n            //if (DialogueCDO->Speakers.IsValidIndex(0))\n            //{\n            //\tRootNode->Line.Text = FText::Format(LOCTEXT("DefaultRootNodeText", "Hi there, i\'m {0}."), FText::FromString(DialogueCDO->Speakers[0].SpeakerID.ToString()));\n            //\tRootNode->SpeakerID = DialogueCDO->Speakers[0].SpeakerID;\n            //}\n// added-end\n\n            DialogueAsset->DialogueTemplate->RootDialogue = RootNode;\n        }\n\n\n'})}),"\n",(0,r.jsx)(n.h3,{id:"dialogueconnectiondrawingpolicycpp",children:"DialogueConnectionDrawingPolicy.cpp"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-cpp",metastring:'title="/NarrativeDialogueEditor/Private/DialogueConnectionDrawingPolicy.cpp" showLineNumbers',children:'\n\n#include "DialogueConnectionDrawingPolicy.h"\n#include "QuestSM.h"\n// added-start\n#include "NarrativeDialogueSettings.h"\n// added-end\n\n...\n\n// removed-start\n#include "NarrativeDialogueSettings.h"\n// removed-end\n#include "DialogueEditorSettings.h"\n\n\n\n\n'})}),"\n",(0,r.jsx)(n.h3,{id:"dialoguegrapheditorcpp",children:"DialogueGraphEditor.cpp"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-cpp",metastring:'title="/NarrativeDialogueEditor/Private/DialogueGraphEditor.cpp" showLineNumbers',children:"\n...\n\nvoid FDialogueGraphEditor::Dialogue_PasteNodesHere(const FVector2D& Location)\n{\n// removed-start\n\n// removed-end\n\n...\n\n// removed-start\nreturn;\n// removed-end\n// added-start\n// return;\n// added-end\n\nTSharedPtr<SGraphEditor> CurrentGraphEditor = FocusedGraphEdPtr.Pin();\nif (!CurrentGraphEditor.IsValid())\n// added-start\n// Disabled Node copy + paste and keeping text based until further testing can happen\n// added-end\n\n...\n\n// removed-start\nTSet<UEdGraphNode*> PastedNodes;\nFEdGraphUtilities::ImportNodesFromText(DialogueGraph, TextToImport, /*out*/ PastedNodes);\n\nif (PastedNodes.Num())\n{\n    for (TSet<UEdGraphNode*>::TIterator It(PastedNodes); It; ++It)\n    {\n        UEdGraphNode* PasteNode = *It;\n        UDialogueGraphNode* PasteDialogueNode = Cast<UDialogueGraphNode>(PasteNode);\n\n\n        if (PasteNode && PasteDialogueNode)\n        {\n            // Select the newly pasted stuff\n            CurrentGraphEditor->SetNodeSelection(PasteNode, true);\n\n            PasteNode->NodePosX += 400.f;\n            PasteNode->NodePosY += 400.f;\n\n            PasteNode->SnapToGrid(16);\n\n            // Give new node a different Guid from the old one\n            PasteNode->CreateNewGuid();\n\n            //New dialogue graph node will point to old dialouenode, duplicate a new one for our new node\n            UDialogueNode* DupNode = Cast<UDialogueNode>(StaticDuplicateObject(PasteDialogueNode->DialogueNode, PasteDialogueNode->DialogueNode->GetOuter()));\n\n            //StaticDuplicateObject won't have assigned a unique ID, grab a unique one\n            DupNode->EnsureUniqueID();\n\n            PasteDialogueNode->DialogueNode = DupNode;\n        }\n    }\n\n    //Now that everything has been pasted, iterate a second time to rebuild the new nodes connections \n    for (TSet<UEdGraphNode*>::TIterator It(PastedNodes); It; ++It)\n    {\n        UEdGraphNode* PasteNode = *It;\n        UDialogueGraphNode* PasteDialogueNode = Cast<UDialogueGraphNode>(PasteNode);\n\n        //Dialogue nodes connections will still be outdated, update these to the new connections\n        DialogueGraph->NodeAdded(PasteDialogueNode);\n        DialogueGraph->PinRewired(PasteDialogueNode, PasteDialogueNode->GetOutputPin());\n    }\n\n}\nelse\n{\n// removed-end\n// added-start\n// TSet<UEdGraphNode*> PastedNodes;\n// FEdGraphUtilities::ImportNodesFromText(DialogueGraph, TextToImport, /*out*/ PastedNodes);\n\n// if (PastedNodes.Num())\n// {\n// \tfor (TSet<UEdGraphNode*>::TIterator It(PastedNodes); It; ++It)\n// \t{\n// \t\tUEdGraphNode* PasteNode = *It;\n// \t\tUDialogueGraphNode* PasteDialogueNode = Cast<UDialogueGraphNode>(PasteNode);\n//\n//\n// \t\tif (PasteNode && PasteDialogueNode)\n// \t\t{\n// \t\t\t// Select the newly pasted stuff\n// \t\t\tCurrentGraphEditor->SetNodeSelection(PasteNode, true);\n//\n// \t\t\tPasteNode->NodePosX += 400.f;\n// \t\t\tPasteNode->NodePosY += 400.f;\n//\n// \t\t\tPasteNode->SnapToGrid(16);\n//\n// \t\t\t// Give new node a different Guid from the old one\n// \t\t\tPasteNode->CreateNewGuid();\n//\n// \t\t\t//New dialogue graph node will point to old dialouenode, duplicate a new one for our new node\n// \t\t\tUDialogueNode* DupNode = Cast<UDialogueNode>(StaticDuplicateObject(PasteDialogueNode->DialogueNode, PasteDialogueNode->DialogueNode->GetOuter()));\n//\n// \t\t\t//StaticDuplicateObject won't have assigned a unique ID, grab a unique one\n// \t\t\tDupNode->EnsureUniqueID();\n//\n// \t\t\tPasteDialogueNode->DialogueNode = DupNode;\n// \t\t}\n// \t}\n//\n// \t//Now that everything has been pasted, iterate a second time to rebuild the new nodes connections \n// \tfor (TSet<UEdGraphNode*>::TIterator It(PastedNodes); It; ++It)\n// \t{\n// \t\tUEdGraphNode* PasteNode = *It;\n// \t\tUDialogueGraphNode* PasteDialogueNode = Cast<UDialogueGraphNode>(PasteNode);\n//\n// \t\t//Dialogue nodes connections will still be outdated, update these to the new connections\n// \t\tDialogueGraph->NodeAdded(PasteDialogueNode);\n// \t\tDialogueGraph->PinRewired(PasteDialogueNode, PasteDialogueNode->GetOutputPin());\n// \t}\n//\n// }\n// else\n// {\n// added-end\n    /*\n    We may be trying to paste from narrative dialogue markup.\n    \n\n...\n\n// removed-start\n\n\n// removed-end\n// added-start\n            \n// added-end\n            FDialogueSchemaAction_NewNode AddNewNode;\n            UDialogueGraphNode* Node;\n            UClass* DialogueNodeClass = SpeakerID.Equals(\"Player\", ESearchCase::IgnoreCase) ? UDialogueGraphNode_Player::StaticClass() : UDialogueGraphNode_NPC::StaticClass();\n\n...\n\n// removed-start\n                    NPCNode->SpeakerID = FName(SpeakerID);\n// removed-end\n// added-start\n                    NPCNode->SetSpeakerID(FName(SpeakerID));\n// added-end\n                }\n            }\n\n\n...\n\n// removed-start\n}\n// removed-end\n// added-start\n// } // else end bracket\n// added-end\n\n// Update UI\nCurrentGraphEditor->NotifyGraphChanged();\n// added-start\n    .IsEditable(bGraphIsEditable)\n// added-end\n\n...\n\n// removed-start\n#undef LOCTEXT_NAMESPACE// removed-end\n// added-start\n#undef LOCTEXT_NAMESPACE\n// added-end\n\n\n"})}),"\n",(0,r.jsx)(n.h3,{id:"dialogueblueprintcompilercpp",children:"DialogueBlueprintCompiler.cpp"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-cpp",metastring:'title="/NarrativeDialogueEditor/Private/DialogueBlueprintCompiler.cpp" showLineNumbers',children:'\n...\n\n#include "DialogueBlueprintCompiler.h"\n#include "DialogueBlueprintGeneratedClass.h"\n// removed-start\n#include "DialogueGraphSchema.h"\n// removed-end\n// added-start\n#include "DialogueGraphSchema.h"\n// added-end\n\n...\n\n\n\n'})}),"\n",(0,r.jsx)(n.h3,{id:"questgraphschemah",children:"QuestGraphSchema.h"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-cpp",metastring:'title="/NarrativeQuestEditor/Private/QuestGraphSchema.h" showLineNumbers',children:"\n...\n\n/** Template of node we want to create */\nUPROPERTY()\n// removed-start\nclass UQuestGraphNode* NodeTemplate;\n// removed-end\n// added-start\nTObjectPtr<class UQuestGraphNode> NodeTemplate;\n// added-end\n\n...\n\n\n\n"})}),"\n",(0,r.jsx)(n.h3,{id:"questgraphschemacpp",children:"QuestGraphSchema.cpp"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-cpp",metastring:'title="/NarrativeQuestEditor/Private/QuestGraphSchema.cpp" showLineNumbers',children:'\n...\n\n#include "QuestSM.h"\n#include "Quest.h"\n#include "QuestGraphEditor.h"\n// added-start\n#include <Engine/ObjectLibrary.h>\n#include "QuestEditorSettings.h"\n// added-end\n\n...\n\n// removed-start\n    //Todo optimize by caching these\n    FAssetRegistryModule& AssetRegistryModule = FModuleManager::LoadModuleChecked<FAssetRegistryModule>("AssetRegistry");\n// removed-end\n    FCategorizedGraphActionListBuilder ActionMainCategory("Now the player needs to...");\n\n// added-start\n    //No need to cache this as once library loads the classes once they will be very quick to load next time \n    auto ItemLibrary = UObjectLibrary::CreateLibrary(UNarrativeTask::StaticClass(), true, GIsEditor);\n\n    TArray<FString> Paths;\n\n    if (const UQuestEditorSettings* Settings = GetDefault<UQuestEditorSettings>())\n    {\n        Paths = Settings->QuestTaskSearchPaths;\n    }\n\n    ItemLibrary->LoadBlueprintsFromPaths(Paths);\n\n    TArray<UClass*> Subclasses;\n    ItemLibrary->GetObjects<UClass>(Subclasses);\n\n// added-end\n    if (UQuestBlueprint* const QuestAsset = Cast<UQuestBlueprint>(ContextMenuBuilder.CurrentGraph->GetOuter()))\n\n...\n\n// removed-start\n        TArray<UClass*> Subclasses;\n        GetDerivedClasses(UNarrativeTask::StaticClass(), Subclasses);\n    \n// removed-end\n        FCategorizedGraphActionListBuilder Title("NEXT THE PLAYER HAS TO:");\n        ActionMainCategory.Append(Title);\n\n\n\n'})}),"\n",(0,r.jsx)(n.h3,{id:"questassetfactorycpp",children:"QuestAssetFactory.cpp"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-cpp",metastring:'title="/NarrativeQuestEditor/Private/QuestAssetFactory.cpp" showLineNumbers',children:'\n...\n\n#include "Editor/ClassViewer/Public/ClassViewerFilter.h"\n#include "QuestBlueprint.h"\n#include "Kismet2/SClassPickerDialog.h"\n// added-start\n#include "Kismet2/KismetEditorUtilities.h"\n// added-end\n\n...\n\n// removed-start\n#include "Kismet2/KismetEditorUtilities.h"\n// removed-end\n#include "Quest.h"\n#include "BlueprintEditorSettings.h"\n#include "QuestEditorSettings.h"\n\n\n'})}),"\n",(0,r.jsx)(n.h3,{id:"narrativequesteditormodulecpp",children:"NarrativeQuestEditorModule.cpp"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-cpp",metastring:'title="/NarrativeQuestEditor/Private/NarrativeQuestEditorModule.cpp" showLineNumbers',children:'\n...\n\n#include "QuestEditorDetails.h"\n#include "QuestEditorSettings.h"\n#include "NarrativeQuestSettings.h"\n// added-start\n#include "QuestTask.h"\n// added-end\n\n...\n\n// removed-start\n#include "QuestTask.h"\n// removed-end\n\nDEFINE_LOG_CATEGORY(LogNarrativeQuestEditor);\n\n\n\n'})}),"\n",(0,r.jsx)(n.h3,{id:"questeditorsettingscpp",children:"QuestEditorSettings.cpp"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-cpp",metastring:'title="/NarrativeQuestEditor/Private/QuestEditorSettings.cpp" showLineNumbers',children:'\n...\n\n    DefaultQuestWidgetClass = QuestNodeUserWidgetFinder.Class;\n}\n\n// added-start\nQuestTaskSearchPaths.Add("/Narrative/DefaultTasks/");\t\nQuestTaskSearchPaths.Add("/NarrativeInventory/Narrative3/Tasks/");\nQuestTaskSearchPaths.Add("/NarrativeNavigator/Narrative3/Tasks/");\t\nQuestTaskSearchPaths.Add("/NarrativeInteraction/Integrations/Narrative3/");\nQuestTaskSearchPaths.Add("/Game/Blueprints/Tasks/");\nQuestTaskSearchPaths.Add("/Game/Blueprints/Narrative/Tasks/");\nQuestTaskSearchPaths.Add("/Game/Narrative/Tasks/");\n\n// added-end\n\n...\n\n\n\n'})}),"\n",(0,r.jsx)(n.h3,{id:"questblueprintcompilercpp",children:"QuestBlueprintCompiler.cpp"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-cpp",metastring:'title="/NarrativeQuestEditor/Private/QuestBlueprintCompiler.cpp" showLineNumbers',children:'\n...\n\n#include "QuestBlueprintCompiler.h"\n#include "QuestBlueprintGeneratedClass.h"\n// removed-start\n#include "QuestGraphSchema.h"\n// removed-end\n// added-start\n#include "QuestGraphSchema.h"\n// added-end\n\n...\n\n\n\n'})}),"\n",(0,r.jsx)(n.h3,{id:"squestgraphnodecpp",children:"SQuestGraphNode.cpp"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-cpp",metastring:'title="/NarrativeQuestEditor/Private/SQuestGraphNode.cpp" showLineNumbers',children:'\n...\n\nreturn FAppStyle::Get().GetBrush(TEXT("Graph.StateNode.Body"));\n}\n\n// removed-start\n#undef LOCTEXT_NAMESPACE// removed-end\n// added-start\n#undef LOCTEXT_NAMESPACE\n// added-end\n\n\n'})}),"\n",(0,r.jsx)(n.h3,{id:"questgrapheditorcpp",children:"QuestGraphEditor.cpp"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-cpp",metastring:'title="/NarrativeQuestEditor/Private/QuestGraphEditor.cpp" showLineNumbers',children:"\n...\n\nreturn false;\n\n// If any of the nodes can be duplicated then we should allow copying\n// removed-start\n/*const FGraphPanelSelectionSet SelectedNodes = GetSelectedNodes();\nfor (FGraphPanelSelectionSet::TConstIterator SelectedIter(SelectedNodes); SelectedIter; ++SelectedIter)\n{\n    UEdGraphNode* Node = Cast<UEdGraphNode>(*SelectedIter);\n    if (Node && Node->CanDuplicateNode())\n    {\n        return true;\n    }\n}\n\nreturn false;*/\n// removed-end\n// added-start\n//const FGraphPanelSelectionSet SelectedNodes = GetSelectedNodes();\n//for (FGraphPanelSelectionSet::TConstIterator SelectedIter(SelectedNodes); SelectedIter; ++SelectedIter)\n//{\n//\tUEdGraphNode* Node = Cast<UEdGraphNode>(*SelectedIter);\n//\tif (Node && Node->CanDuplicateNode())\n//\t{\n//\t\treturn true;\n//\t}\n//}\n\n//return false;\n// added-end\n// added-start\n    .IsEditable(bGraphIsEditable)\n// added-end\n\n...\n\n\n\n"})}),"\n",(0,r.jsx)(n.h3,{id:"questeditorsettingsh",children:"QuestEditorSettings.h"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-cpp",metastring:'title="/NarrativeQuestEditor/Private/QuestEditorSettings.h" showLineNumbers',children:'\n...\n\npublic:\n\nUQuestEditorSettings();\n// added-start\n\n//All the folders the quest editor searches in to find your quest tasks. \nUPROPERTY(EditAnywhere, config, Category = "Quests", meta = (RelativeToGameContentDir))\nTArray<FString> QuestTaskSearchPaths;\n// added-end\n\n...\n\n\n\n'})}),"\n",(0,r.jsx)(n.h3,{id:"dialogueassetcpp",children:"DialogueAsset.cpp"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-cpp",metastring:'title="/Narrative/Private/DialogueAsset.cpp" showLineNumbers',children:'\n...\n\nDialogue = CreateDefaultSubobject<UDialogue>(TEXT("Dialogue"));\n\n//Any dialogues created prior to the speakers update need a speaker added \n// removed-start\nif (Dialogue->Speakers.Num() == 0)\n{\n    FSpeakerInfo DefaultSpeaker;\n    DefaultSpeaker.SpeakerID = GetFName();\n    Dialogue->Speakers.Add(DefaultSpeaker);\n}\n// removed-end\n// added-start\n//if (Dialogue->Speakers.Num() == 0)\n//{\n//\tFSpeakerInfo DefaultSpeaker;\n//\tDefaultSpeaker.SpeakerID = GetFName();\n//\tDialogue->Speakers.Add(DefaultSpeaker);\n//}\n// added-end\n\n...\n\n\n\n'})}),"\n",(0,r.jsx)(n.h3,{id:"dialogueblueprintgeneratedclasscpp",children:"DialogueBlueprintGeneratedClass.cpp"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-cpp",metastring:'title="/Narrative/Private/DialogueBlueprintGeneratedClass.cpp" showLineNumbers',children:'\n#include "DialogueBlueprintGeneratedClass.h"\n#include "Dialogue.h"\n// removed-start\n#include <DialogueSM.h>\n// removed-end\n// added-start\n#include "DialogueSM.h"\n// added-end\n\n...\n\n\n\n'})}),"\n",(0,r.jsx)(n.h3,{id:"questcpp",children:"Quest.cpp"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-cpp",metastring:'title="/Narrative/Private/Quest.cpp" showLineNumbers',children:'\n...\n\n#include "Quest.h"\n#include "NarrativeDataTask.h"\n#include "QuestSM.h"\n// removed-start\n#include "Net/UnrealNetwork.h"\n#include "GameFramework/PlayerController.h"\n// removed-end\n// added-start\n#include "GameFramework/PlayerController.h"\n#include "Net/UnrealNetwork.h"\n// added-end\n// added-start\nbTracked = true; \n// added-end\n// added-start\nBPPreQuestStarted(this);\n\n// added-end\n// added-start\nvoid UQuest::SetTracked(const bool bNewTracked)\n{\nif (bNewTracked != bTracked)\n{\n    bTracked = bNewTracked;\n    \n    BPOnTrackedChanged(this, bTracked);\n}\n}\n\n// added-end\n\n...\n\n// removed-start\n    //Finally, activate our new state, therefore activating its branches allowing us to take one to progress through the quest \n// removed-end\n// added-start\n    //We dont call delegate updates when loading, as delegates are typically just for UI updates and things \n    if (!OwningComp->bIsLoading)\n    {\n        //Fire delegates because we\'re about to activate the current state. This can actually cause another state change, which will cause delegates to fire in the wrong order. \n        BPOnQuestNewState(this, NewState);\n\n        if (OwningComp)\n        {\n            OwningComp->OnQuestNewState.Broadcast(this, NewState);\n        }\n\n        QuestNewState.Broadcast(this, CurrentState);\n    }\n\n    //Finally, activate our new state, therefore activating its branches allowing us to take one to progress through the quest. \n// added-end\n    CurrentState->Activate();\n\n// removed-start\n    //If we\'re loading quests back in off disk we don\'t want to broadcast any progress or anything\n    if (OwningComp->bIsLoading)\n    {\n        return;\n    }\n\n    //Fire off delegates \n    BPOnQuestNewState(this, NewState);\n\n    if (OwningComp)\n    {\n        OwningComp->OnQuestNewState.Broadcast(this, NewState);\n    }\n\n    QuestNewState.Broadcast(this, CurrentState);\n// removed-end\n}\n\n...\n\n// removed-start\nBPOnQuestFailed(this, QuestFailedMessage);\n\nQuestFailed.Broadcast(this, QuestFailedMessage);\n\nif (OwningComp)\n{\n// removed-end\n// added-start\nif (OwningComp && !OwningComp->bIsLoading)\n{\n    BPOnQuestFailed(this, QuestFailedMessage);\n\n    QuestFailed.Broadcast(this, QuestFailedMessage);\n\n// added-end\n    OwningComp->OnQuestFailed.Broadcast(this, QuestFailedMessage);\n}\n\n\n...\n\n// removed-start\nBPOnQuestSucceeded(this, QuestSucceededMessage);\n\nQuestSucceeded.Broadcast(this, QuestSucceededMessage);\n\nif (OwningComp)\n{\n// removed-end\n// added-start\nif (OwningComp && !OwningComp->bIsLoading)\n{\n    BPOnQuestSucceeded(this, QuestSucceededMessage);\n\n    QuestSucceeded.Broadcast(this, QuestSucceededMessage);\n\n// added-end\n    OwningComp->OnQuestSucceeded.Broadcast(this, QuestSucceededMessage);\n}\n\n\n\n'})}),"\n",(0,r.jsx)(n.h3,{id:"dialoguesmcpp",children:"DialogueSM.cpp"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-cpp",metastring:'title="/Narrative/Private/DialogueSM.cpp" showLineNumbers',children:'\n#include "Dialogue.h"\n#include "NarrativeComponent.h"\n#include "NarrativeCondition.h"\n// added-start\n#include "NarrativeDialogueSettings.h"\n#include "NarrativePartyComponent.h"\n// added-end\n\n...\n\n// removed-start\n#include "NarrativeDialogueSettings.h"\n// removed-end\n#include "LevelSequencePlayer.h"\n#include "LevelSequenceActor.h"\n#include "Sound/SoundBase.h"\n// removed-start\n#include "NarrativePartyComponent.h"\n// removed-end\n\n...\n\n// removed-start\nTArray<class UDialogueNode_NPC*> UDialogueNode::GetNPCReplies(APlayerController* OwningController, APawn* OwningPawn, class UNarrativeComponent* NarrativeComponent)\n{\nTArray<class UDialogueNode_NPC*> ValidReplies;\n\nfor (auto& NPCReply : NPCReplies)\n// removed-end\n// added-start\nclass UDialogueNode_NPC* UDialogueNode::GetFirstValidNPCReply(APlayerController* OwningController, APawn* OwningPawn, class UNarrativeComponent* NarrativeComponent)\n{\nTArray<class UDialogueNode_NPC*> RepliesToCheck = NPCReplies;\n\nif (const UNarrativeDialogueSettings* DialogueSettings = GetDefault<UNarrativeDialogueSettings>())\n{\n    //Sort the replies by their Y position in the graph\n    RepliesToCheck.Sort([DialogueSettings](const UDialogueNode_NPC& NodeA, const UDialogueNode_NPC& NodeB) {\n        return DialogueSettings->bEnableVerticalWiring ? NodeA.NodePos.X < NodeB.NodePos.X : NodeA.NodePos.Y < NodeB.NodePos.Y;\n        });\n}\n\nfor (auto& NPCReply : RepliesToCheck)\n// added-end\n{\n    if (NPCReply->AreConditionsMet(OwningPawn, OwningController, NarrativeComponent))\n    {\n// removed-start\n        ValidReplies.Add(NPCReply);\n    }\n}\n\nreturn ValidReplies;\n// removed-end\n// added-start\n        return NPCReply;\n    }\n}\n\nreturn nullptr;\n// added-end\n\n...\n\n// removed-start\n    Prefix = NPCNode->SpeakerID.ToString();\n// removed-end\n// added-start\n    Prefix = NPCNode->GetSpeakerID().ToString();\n// added-end\n}\nelse\n{\n\n...\n\n// removed-start\n    return HintText;\n// removed-end\n// added-start\n    // Replace string variables on the hint text\n    FText newHintText = HintText;\n    InDialogue->ReplaceStringVariables(this, Line, newHintText);\n    return newHintText;\n// added-end\n}\n\nFText TextToUse = FText::GetEmpty();\n// added-start\n// Replace string variables on the hint text\nInDialogue->ReplaceStringVariables(this, Line, TextToUse);\n\n// added-end\n\n...\n\n\n\n'})}),"\n",(0,r.jsx)(n.h3,{id:"questsmcpp",children:"QuestSM.cpp"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-cpp",metastring:'title="/Narrative/Private/QuestSM.cpp" showLineNumbers',children:"\n...\n\nfor (auto& MyTask : QuestTasks)\n{\n// removed-start\n    if (!MyTask->IsComplete())\n// removed-end\n// added-start\n    if (MyTask && !MyTask->IsComplete())\n// added-end\n\n...\n\n// removed-start\n#undef LOCTEXT_NAMESPACE// removed-end\n// added-start\n#undef LOCTEXT_NAMESPACE\n// added-end\n\n\n"})}),"\n",(0,r.jsx)(n.h3,{id:"narrativepartycomponentcpp",children:"NarrativePartyComponent.cpp"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-cpp",metastring:'title="/Narrative/Private/NarrativePartyComponent.cpp" showLineNumbers',children:"\n...\n\nDOREPLIFETIME(UNarrativePartyComponent, PartyMemberStates);\n}\n\n// removed-start\nbool UNarrativePartyComponent::BeginDialogue(TSubclassOf<class UDialogue> DialogueClass, FName StartFromID /*= NAME_None*/)\n// removed-end\n// added-start\nbool UNarrativePartyComponent::BeginDialogue(TSubclassOf<class UDialogue> DialogueClass, const FDialoguePlayParams PlayParams)\n// added-end\n\n...\n\n// removed-start\n    if (SetCurrentDialogue(DialogueClass, StartFromID))\n// removed-end\n// added-start\n    if (SetCurrentDialogue(DialogueClass, PlayParams))\n// added-end\n    {\n        OnDialogueBegan.Broadcast(CurrentDialogue);\n\n\n...\n\n// removed-start\n}\n// removed-end\n// added-start\n}// added-end\n\n\n"})}),"\n",(0,r.jsx)(n.h3,{id:"dialoguecpp",children:"Dialogue.cpp"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-cpp",metastring:'title="/Narrative/Private/Dialogue.cpp" showLineNumbers',children:'\n// Copyright Narrative Tools 2022. \n\n#include "Dialogue.h"\n// removed-start\n#include "Net/UnrealNetwork.h"\n#include "UObject/ConstructorHelpers.h"\n// removed-end\n// added-start\n#include "NarrativeDialogueSettings.h"\n// added-end\n// added-start\n#include "NarrativeDialogueSequence.h"\n#include "NarrativePartyComponent.h"\n#include "UObject/ConstructorHelpers.h"\n// added-end\n\n...\n\n// removed-start\n#include "NarrativeDialogueSettings.h"\n#include "Camera/CameraActor.h"\n// removed-end\n#include "Camera/CameraShakeBase.h"\n// removed-start\n#include "CineCameraActor.h"\n#include "CineCameraComponent.h"\n#include "NarrativeDefaultCinecam.h"\n// removed-end\n#include "Sound/SoundBase.h"\n// removed-start\n#include <Camera/CameraShakeBase.h>\n// removed-end\n#include <EngineUtils.h>\n// removed-start\n#include <Kismet/KismetMathLibrary.h>\n#include <DefaultLevelSequenceInstanceData.h>\n#include "NarrativeDialogueSequence.h"\n#include "NarrativePartyComponent.h"\n// removed-end\n// added-start\nPriority = 0;\nPlayerAutoAdjustTransform = FTransform(FRotator(0.f, 180.f, 0.f), FVector(200.f, 0.f, 0.f));\n// added-end\n\n...\n\n// removed-start\nbool UDialogue::Initialize(class UNarrativeComponent* InitializingComp, FName StartFromID)\n// removed-end\n// added-start\nbool UDialogue::Initialize(class UNarrativeComponent* InitializingComp, const FDialoguePlayParams InPlayParams)\n// added-end\n{\nif (!HasAnyFlags(RF_ClassDefaultObject))\n{\n\n...\n\n// removed-start\n        UDialogueNode_NPC* StartDialogue = StartFromID.IsNone() ? RootDialogue : GetNPCReplyByID(StartFromID);\n\n        if (!StartDialogue && !StartFromID.IsNone())\n        {\n            UE_LOG(LogNarrative, Warning, TEXT("UDialogue::Initialize could not find Start node with StartFromID: %s. Falling back to root node."), *StartFromID.ToString());\n            StartDialogue = RootDialogue;\n// removed-end\n// added-start\n\n        UDialogueNode_NPC* StartDialogue = InPlayParams.StartFromID.IsNone() ? RootDialogue : GetNPCReplyByID(InPlayParams.StartFromID);\n\n        if (!StartDialogue && !InPlayParams.StartFromID.IsNone())\n        {\n            //UE_LOG(LogNarrative, Warning, TEXT("UDialogue::Initialize could not find Start node with StartFromID: %s. Falling back to root node."), *StartFromID.ToString());\n            return false;\n            //StartDialogue = RootDialogue;\n// added-end\n        }\n\n        //Initialize all the data required to begin the dialogue \n// added-start\n            PlayParams = InPlayParams;\n            \n// added-end\n\n...\n\n// removed-start\nif (DialogueSequencePlayer)\n{\n    DialogueSequencePlayer->Destroy();\n}\n\n// removed-end\nOwningComp = nullptr; \nDefaultDialogueShot = nullptr;\n\n\n...\n\n// removed-start\nif (PlayerSpeakerInfo.SpeakerID != NAME_PlayerSpeakerID)\n// removed-end\n// added-start\nfor (auto& Speaker : Speakers)\n// added-end\n{\n    PlayerSpeakerInfo.SpeakerID = NAME_PlayerSpeakerID;\n}\n\n...\n\n// removed-start\nfor (int32 i = 0; i < PartySpeakerInfo.Num(); ++i)\n{\n    if (PartySpeakerInfo.IsValidIndex(i))\n    {\n        PartySpeakerInfo[i].SpeakerID = FName(FString::Printf(TEXT("PartyMember%d"), i));\n    }\n}\n\n//If a designer clears the speakers always ensure at least one is added \nif (Speakers.Num() == 0)\n{\n    FSpeakerInfo DefaultSpeaker;\n    DefaultSpeaker.SpeakerID = GetFName();\n    Speakers.Add(DefaultSpeaker);\n}\n\n//If any NPC replies don\'t have a valid speaker set to the first speaker\nfor (auto& Node : NPCReplies)\n{\n    if (Node)\n    {\n        bool bSpeakerNotFound = true;\n\n        for (auto& Speaker : Speakers)\n        {\n            if (Speaker.SpeakerID == Node->SpeakerID)\n            {\n                bSpeakerNotFound = false;\n            }\n        }\n\n        if (bSpeakerNotFound)\n        {\n            Node->SpeakerID = Speakers[0].SpeakerID;\n        }\n    }\n}\n// removed-end\n// added-start\n//If any NPC replies don\'t have a valid speaker set to the first speaker TODO this is broken - figure out why \n//for (auto& Node : NPCReplies)\n//{\n//\tif (Node)\n//\t{\n//\t\tbool bSpeakerNotFound = true;\n\n//\t\tfor (auto& Speaker : Speakers)\n//\t\t{\n//\t\t\tif (Speaker.SpeakerID == Node->SpeakerID)\n//\t\t\t{\n//\t\t\t\tbSpeakerNotFound = false;\n//\t\t\t}\n//\t\t}\n\n//\t\tif (bSpeakerNotFound)\n//\t\t{\n//\t\t\tNode->SpeakerID = Speakers[0].SpeakerID;\n//\t\t}\n//\t}\n//}\n// added-end\n}\n\nvoid UDialogue::PreEditChange(FEditPropertyChain& PropertyAboutToChange)\n\n...\n\n// removed-start\n    if (Speaker.SpeakerID == SpeakerID)\n// removed-end\n// added-start\n    if (Speaker.GetSpeakerID() == SpeakerID)\n// added-end\n    {\n        return Speaker;\n    }\n\n...\n\n// removed-start\n    if (DialogueSequencePlayer && DialogueSequencePlayer->SequencePlayer)\n    {\n        DialogueSequencePlayer->SequencePlayer->OnFinished.RemoveAll(this);\n// removed-end\n// added-start\n    if (DialogueSequencePlayer)\n    {\n        if (ULevelSequencePlayer* SP = DialogueSequencePlayer->GetSequencePlayer())\n        {\n            SP->OnFinished.RemoveAll(this);\n        }\n// added-end\n    }\n\n    if (CurrentNode->IsA<UDialogueNode_NPC>())\n\n...\n\n// removed-start\n        if (DialogueSequencePlayer && DialogueSequencePlayer->SequencePlayer)\n        {\n            DialogueSequencePlayer->SequencePlayer->OnFinished.RemoveAll(this);\n// removed-end\n// added-start\n        if (DialogueSequencePlayer)\n        {\n            if (ULevelSequencePlayer* SP = DialogueSequencePlayer->GetSequencePlayer())\n            {\n                SP->OnFinished.RemoveAll(this);\n            }\n// added-end\n        }\n\n        if (GetWorld())\n// added-start\nInitSpeakerAvatars();\n\nif (bAdjustPlayerTransform)\n{\n    AdjustPlayerTransform();\n}\n\n// added-end\n// added-start\n            {\n// added-end\n\n...\n\n// removed-start\n        }\n    }\n}\n\nInitSpeakerAvatars();\n// removed-end\n// added-start\n            }\n        }\n    }\n}\n// added-end\n\nif (OwningController && OwningController->IsLocalPlayerController())\n{\n\n...\n\n// removed-start\n        //Track spawned avatars\n        SpeakerAvatars.Add(Speaker.SpeakerID, SpeakerActor);\n        Speaker.SpeakerAvatarTransform = SpeakerActor->GetActorTransform(); \n// removed-end\n// added-start\n        if (IsValid(SpeakerActor))\n        {\t\t\t\n            //Track spawned avatars\n            SpeakerAvatars.Add(Speaker.GetSpeakerID(), SpeakerActor);\n            Speaker.SpeakerAvatarTransform = SpeakerActor->GetActorTransform();\n        }\n// added-end\n    }\n}\n\n\n...\n\n// removed-start\nif (UNarrativePartyComponent* OwningParty = Cast<UNarrativePartyComponent>(OwningComp))\n{\n    TArray<APlayerState*> PartyMembers = OwningParty->GetPartyMemberStates();\n\n    for (int32 i = 0; i < PartyMembers.Num(); ++i)\n    {\n        if (!PartySpeakerInfo.IsValidIndex(i))\n        {\n            FPlayerSpeakerInfo NewSpeaker;\n            NewSpeaker.SpeakerID = FName(FString::Printf(TEXT("PartyMember%d"), i));\n            PartySpeakerInfo.Add(NewSpeaker);\n        }\n\n        if (PartySpeakerInfo.IsValidIndex(i) && PartyMembers.IsValidIndex(i))\n        {\n            FPlayerSpeakerInfo& MemberSpeakerInfo = PartySpeakerInfo[i];\n\n            if (APlayerState* PartyMember = PartyMembers[i])\n            {\n                AActor* SpeakerActor = LinkSpeakerAvatar(MemberSpeakerInfo);\n\n                //Fallback to speaker actors pawn if can\'t link\n                if (!SpeakerActor)\n                {\n                    SpeakerActor = PartyMember->GetPawn();\n                }\n\n                if (SpeakerActor)\n                {\n                    /*There has to be a nicer way to construct an FName from a int but I sure couldnt find it!\n                    Instead of caching speaker avatars via ID, for parties we use the players playerID which is unique.\n                    This gives us a nice convenient way to map someones PlayerState to their Players avatar */\n                    const FName Name_PID = FName(FString::Printf(TEXT("%d"), PartyMember->GetPlayerId()));\n\n                    MemberSpeakerInfo.SpeakerID = Name_PID;\n\n                    SpeakerAvatars.Add(MemberSpeakerInfo.SpeakerID, SpeakerActor);\n\n                    //Hide the party members pawn; we\'ve spawned them an avatar \n                    if (APawn* PawnOwner = PartyMember->GetPawn())\n                    {\n                        //Store our local pawn in the playerspeakerinfo and the existing systems will just treat it like our solo player \n                        if (PawnOwner->IsLocallyControlled())\n                        {\n                            SpeakerAvatars.Add(PlayerSpeakerInfo.SpeakerID, SpeakerActor);\n                        }\n\n                        //If we\'re using a speaker avatar for this player, we want to hide their pawn\n                        if (SpeakerActor != PartyMember->GetPawn())\n                        {\n                            PawnOwner->SetActorHiddenInGame(true);\n                        }\n                    }\n                }\n            }\n        }\n    }\n}\nelse //spawn solo players avatar in \n{\n    //Spawn the players speaker avatar in, or just use the players pawn as their avatar if one isn\'t set\n    if (AActor* SpeakerActor = LinkSpeakerAvatar(PlayerSpeakerInfo))\n    {\n        SpeakerAvatars.Add(PlayerSpeakerInfo.SpeakerID, SpeakerActor);\n        PlayerSpeakerInfo.SpeakerAvatarTransform = SpeakerActor->GetActorTransform();\n\n        //By default if the player has a speaker avatar in the world we\'ll hide their pawn\n        if (OwningPawn && SpeakerActor != OwningPawn)\n        {\n            OwningPawn->SetActorHiddenInGame(true);\n        }\n    }\n    else if (!OwningPawn)\n    {\n        UE_LOG(LogNarrative, Warning, TEXT("Narrative wasn\'t able to find the avatar for the player, as a SpeakerAvatarClass wasn\'t set, no actors with tag \'Player\' were found, and OwningPawn was invalid."));\n    }\n}\n// removed-end\n// added-start\n//if (UNarrativePartyComponent* OwningParty = Cast<UNarrativePartyComponent>(OwningComp))\n//{\n//\tTArray<APlayerState*> PartyMembers = OwningParty->GetPartyMemberStates();\n\n//\tfor (int32 i = 0; i < PartyMembers.Num(); ++i)\n//\t{\n//\t\tif (!PartySpeakerInfo.IsValidIndex(i))\n//\t\t{\n//\t\t\tFPlayerSpeakerInfo NewSpeaker;\n//\t\t\t//NewSpeaker.SpeakerID = FName(FString::Printf(TEXT("PartyMember%d"), i));\n//\t\t\tPartySpeakerInfo.Add(NewSpeaker);\n//\t\t}\n\n//\t\tif (PartySpeakerInfo.IsValidIndex(i) && PartyMembers.IsValidIndex(i))\n//\t\t{\n//\t\t\tFPlayerSpeakerInfo& MemberSpeakerInfo = PartySpeakerInfo[i];\n\n//\t\t\tif (APlayerState* PartyMember = PartyMembers[i])\n//\t\t\t{\n//\t\t\t\tAActor* SpeakerActor = LinkSpeakerAvatar(MemberSpeakerInfo);\n\n//\t\t\t\t//Fallback to speaker actors pawn if can\'t link\n//\t\t\t\tif (!SpeakerActor)\n//\t\t\t\t{\n//\t\t\t\t\tSpeakerActor = PartyMember->GetPawn();\n//\t\t\t\t}\n\n//\t\t\t\tif (SpeakerActor)\n//\t\t\t\t{\n//\t\t\t\t\t/*There has to be a nicer way to construct an FName from a int but I sure couldnt find it!\n//\t\t\t\t\tInstead of caching speaker avatars via ID, for parties we use the players playerID which is unique.\n//\t\t\t\t\tThis gives us a nice convenient way to map someones PlayerState to their Players avatar */\n//\t\t\t\t\tconst FName Name_PID = FName(FString::Printf(TEXT("%d"), PartyMember->GetPlayerId()));\n\n//\t\t\t\t\tMemberSpeakerInfo.SpeakerID = Name_PID;\n\n//\t\t\t\t\tSpeakerAvatars.Add(MemberSpeakerInfo.SpeakerID, SpeakerActor);\n\n//\t\t\t\t\t//Hide the party members pawn; we\'ve spawned them an avatar \n//\t\t\t\t\tif (APawn* PawnOwner = PartyMember->GetPawn())\n//\t\t\t\t\t{\n//\t\t\t\t\t\t//Store our local pawn in the playerspeakerinfo and the existing systems will just treat it like our solo player \n//\t\t\t\t\t\tif (PawnOwner->IsLocallyControlled())\n//\t\t\t\t\t\t{\n//\t\t\t\t\t\t\tSpeakerAvatars.Add(PlayerSpeakerInfo.SpeakerID, SpeakerActor);\n//\t\t\t\t\t\t}\n\n//\t\t\t\t\t\t//If we\'re using a speaker avatar for this player, we want to hide their pawn\n//\t\t\t\t\t\tif (SpeakerActor != PartyMember->GetPawn())\n//\t\t\t\t\t\t{\n//\t\t\t\t\t\t\tPawnOwner->SetActorHiddenInGame(true);\n//\t\t\t\t\t\t}\n//\t\t\t\t\t}\n//\t\t\t\t}\n//\t\t\t}\n//\t\t}\n//\t}\n//}\n//else //spawn solo players avatar in \n//{\n// \n// \n// \n\n//Spawn the players speaker avatar in, or just use the players pawn as their avatar if one isn\'t set\nif (AActor* SpeakerActor = LinkSpeakerAvatar(PlayerSpeakerInfo))\n{\n    SpeakerAvatars.Add(PlayerSpeakerInfo.GetSpeakerID(), SpeakerActor);\n    PlayerSpeakerInfo.SpeakerAvatarTransform = SpeakerActor->GetActorTransform();\n\n    //By default if the player has a speaker avatar in the world we\'ll hide their pawn\n    if (OwningPawn && SpeakerActor != OwningPawn)\n    {\n        OwningPawn->SetActorHiddenInGame(true);\n    }\n}\nelse if (!OwningPawn)\n{\n    UE_LOG(LogNarrative, Warning, TEXT("Narrative wasn\'t able to find the avatar for the player, as a SpeakerAvatarClass wasn\'t set, no actors with tag \'Player\' were found, and OwningPawn was invalid."));\n}\n\n//}\n// added-end\n}\n\n\n\n...\n\n// removed-start\n    if (AActor* SpeakerAvatar = GetAvatar(Speaker.SpeakerID))\n// removed-end\n// added-start\n    if (AActor* SpeakerAvatar = GetAvatar(Speaker.GetSpeakerID()))\n// added-end\n    {\n        DestroySpeakerAvatar(Speaker, SpeakerAvatar);\n    }\n\n...\n\n// removed-start\n    if (AActor* SpeakerAvatar = GetAvatar(PartySpeaker.SpeakerID))\n// removed-end\n// added-start\n    if (AActor* SpeakerAvatar = GetAvatar(PartySpeaker.GetSpeakerID()))\n// added-end\n    {\n        DestroySpeakerAvatar(PartySpeaker, SpeakerAvatar);\n    }\n\n...\n\n// removed-start\nif (DialogueSequencePlayer && DialogueSequencePlayer->SequencePlayer)\n{\n    DialogueSequencePlayer->SequencePlayer->Stop();\n// removed-end\n// added-start\nif (DialogueSequencePlayer)\n{\n    if (ULevelSequencePlayer* SP = DialogueSequencePlayer->GetSequencePlayer())\n    {\n        SP->Stop();\n    }\n\n// added-end\n    DialogueSequencePlayer->Destroy();\n}\n// added-start\n\n// added-end\nif (OwningPawn)\n// added-start\n        bool bWantsAutoSelect = bFreeMovement;\n\n// added-end\n\n...\n\n// removed-start\n            if ((bFreeMovement || DialogueSettings->bAutoSelectSingleResponse) && AvailableResponses.Num() == 1)\n            {\n                OwningComp->TrySelectDialogueOption(AvailableResponses.Last());\n                return;\n            }\n        }\n// removed-end\n// added-start\n            if (DialogueSettings->bAutoSelectSingleResponse && AvailableResponses.Num() == 1)\n            {\n                bWantsAutoSelect = true; \n            }\n        }\n\n// added-end\n\n        //If a response is autoselect, select it and early out \n        for (auto& AvailableResponse : AvailableResponses)\n\n...\n\n// removed-start\n            if (AvailableResponse && AvailableResponse->IsAutoSelect())\n// removed-end\n// added-start\n            if (AvailableResponse && (AvailableResponse->IsAutoSelect() || bWantsAutoSelect))\n// added-end\n            {\n                OwningComp->TrySelectDialogueOption(AvailableResponse);\n                return;\n\n...\n\n// removed-start\n    if (SpeakerAvatars.Contains(CurrentSpeaker.SpeakerID))\n    {\n        ListeningActor = SpeakerAvatars[CurrentSpeaker.SpeakerID];\n// removed-end\n// added-start\n    if (SpeakerAvatars.Contains(CurrentSpeaker.GetSpeakerID()))\n    {\n        ListeningActor = SpeakerAvatars[CurrentSpeaker.GetSpeakerID()];\n// added-end\n    }\n\n    /*\n\n...\n\n// removed-start\n    CurrentSpeaker = GetSpeaker(NPCReply->SpeakerID);\n// removed-end\n// added-start\n    CurrentSpeaker = GetSpeaker(NPCReply->GetSpeakerID());\n// added-end\n\n    ProcessNodeEvents(NPCReply, true);\n\n\n...\n\n// removed-start\nif (SpeakerAvatars.Contains(PlayerSpeakerInfo.SpeakerID))\n{\n    return SpeakerAvatars[PlayerSpeakerInfo.SpeakerID];\n// removed-end\n// added-start\nif (SpeakerAvatars.Contains(PlayerSpeakerInfo.GetSpeakerID()))\n{\n    return SpeakerAvatars[PlayerSpeakerInfo.GetSpeakerID()];\n// added-end\n}\nelse\n{\n\n...\n\n// removed-start\n            UDialogueNode_NPC* NextReply = nullptr;\n\n            for (auto& NextNPCReply : PlayerNode->NPCReplies)\n            {\n                if (NextNPCReply && NextNPCReply->AreConditionsMet(OwningPawn, OwningController, OwningComp))\n                {\n                    NextReply = NextNPCReply;\n                    break;\n                }\n            }\n// removed-end\n// added-start\n            UDialogueNode_NPC* NextReply = PlayerNode->GetFirstValidNPCReply(OwningController, OwningPawn, OwningComp);\n// added-end\n\n            //If we can generate more dialogue from the reply that was selected, do so, otherwise exit dialogue \n            if (GenerateDialogueChunk(NextReply))\n\n...\n\n// removed-start\nAActor* SpawnedActor = Info.SpeakerID == PlayerSpeakerInfo.SpeakerID ? OwningPawn : nullptr;\n\nif (!Info.SpeakerID.IsNone())\n{\n    if (!SpeakerAvatars.Contains(Info.SpeakerID) && IsValid(Info.SpeakerAvatarClass))\n// removed-end\n// added-start\nAActor* SpawnedActor = Info.GetSpeakerID() == PlayerSpeakerInfo.GetSpeakerID() ? OwningPawn : nullptr;\n\nif (!Info.GetSpeakerID().IsNone())\n{\n    if (!SpeakerAvatars.Contains(Info.GetSpeakerID()) && IsValid(Info.SpeakerAvatarClass))\n// added-end\n    {\n        FActorSpawnParameters SpawnParams;\n        SpawnParams.bNoFail = true;\n\n...\n\n// removed-start\n            if (Actor && Actor->ActorHasTag(Info.SpeakerID))\n// removed-end\n// added-start\n            if (Actor && Actor->ActorHasTag(Info.GetSpeakerID()))\n// added-end\n            {\n                FoundActors.Add(Actor);\n            }\n\n...\n\n// removed-start\n        DialogueAudio = UGameplayStatics::SpawnSoundAtLocation(OwningComp, Line.DialogueSound, Speaker->GetActorLocation(), Speaker->GetActorForwardVector().Rotation());\n// removed-end\n// added-start\n        //DialogueAudio = UGameplayStatics::SpawnSoundAtLocation(OwningComp, Line.DialogueSound, Speaker->GetActorLocation(), Speaker->GetActorForwardVector().Rotation(), 1.f, 1.f, 0.f, DialogueSoundAttenuation);\n        DialogueAudio = UGameplayStatics::SpawnSoundAttached(Line.DialogueSound, Speaker->GetRootComponent(), NAME_None, FVector::ZeroVector, EAttachLocation::SnapToTarget, false, 1.f, 1.f, 0.f, DialogueSoundAttenuation);\n// added-end\n    }\n    else //Else just play 2D audio \n    {\n// added-start\n        else // If there is no shot to play, we should end any previously playing one \n        {\n            StopDialogueSequence();\n        }\n// added-end\n\n...\n\n// removed-start\nif (SpeakerAvatars.Contains(SpeakerInfo.SpeakerID))\n{\n    SpeakingActor = *SpeakerAvatars.Find(SpeakerInfo.SpeakerID);\n// removed-end\n// added-start\nif (SpeakerAvatars.Contains(SpeakerInfo.GetSpeakerID()))\n{\n    SpeakingActor = *SpeakerAvatars.Find(SpeakerInfo.GetSpeakerID());\n// added-end\n}\n\nPlayDialogueNode(NPCReply, LineToPlay, SpeakerInfo, SpeakingActor, ListeningActor);\n\n...\n\n// removed-start\n    ListeningActor = GetAvatar(CurrentSpeaker.SpeakerID);\n// removed-end\n// added-start\n    ListeningActor = GetAvatar(CurrentSpeaker.GetSpeakerID());\n// added-end\n}\n\nPlayDialogueNode(PlayerReply, Line, PlayerSpeakerInfo, SpeakingActor, ListeningActor);\n// added-start\n    // if the lines text is empty, return a duration of 0\n    if (Line.Text.IsEmptyOrWhitespace())\n    {\n        return 0.f;\n    }\n\n// added-end\n// added-start\n}\n\nvoid UDialogue::AdjustPlayerTransform_Implementation()\n{\n//Only adjust for 1 on 1 dialogue \nif (Speakers.Num() == 1 && Speakers.IsValidIndex(0))\n{\n    if (OwningPawn && OwningController)\n    {\n        const FTransform PlayerDesiredTransform = PlayerAutoAdjustTransform * Speakers[0].SpeakerAvatarTransform;\n\n        OwningPawn->TeleportTo(PlayerDesiredTransform.GetLocation(), PlayerDesiredTransform.GetRotation().Rotator());\n        OwningController->SetControlRotation(PlayerDesiredTransform.GetRotation().Rotator());\n    }\n}\n// added-end\n\n...\n\n// removed-start\n    if (DialogueSequencePlayer && DialogueSequencePlayer->SequencePlayer)\n    {\n        DialogueSequencePlayer->SequencePlayer->OnFinished.RemoveAll(this);\n\n        Sequence->BeginPlaySequence(DialogueSequencePlayer, this, Speaker, Listener);\n\n        if (CurrentDialogueSequence)\n        {\n            CurrentDialogueSequence->EndSequence();\n        }\n\n        CurrentDialogueSequence = Sequence;\n\n        if (CurrentLine.Duration == ELineDuration::LD_WhenSequenceEnds)\n        {\n            DialogueSequencePlayer->SequencePlayer->OnFinished.AddDynamic(this, &UDialogue::EndCurrentLine);\n// removed-end\n// added-start\n    if (DialogueSequencePlayer)\n    {\n        if (ULevelSequencePlayer* SP = DialogueSequencePlayer->GetSequencePlayer())\n        {\n            SP->OnFinished.RemoveAll(this);\n\n            if (CurrentDialogueSequence)\n            {\n                CurrentDialogueSequence->EndSequence();\n            }\n\n            Sequence->BeginPlaySequence(DialogueSequencePlayer, this, Speaker, Listener);\n\n            CurrentDialogueSequence = Sequence;\n\n            if (CurrentLine.Duration == ELineDuration::LD_WhenSequenceEnds)\n            {\n                SP->OnFinished.AddDynamic(this, &UDialogue::EndCurrentLine);\n            }\n// added-end\n        }\n    }\n\n\n...\n\n// removed-start\n    if (DialogueSequencePlayer && DialogueSequencePlayer->SequencePlayer)\n    {\n        DialogueSequencePlayer->SequencePlayer->Stop();\n\n        /*\n        If your pawn has a dialogue avatar, narrative hides your pawn as you wouldn\'t want it to show up in a dialogue.\n        However a UE5 bug - Stop() will re-show player pawn even if it was already hidden - we want to keep it hidden*/\n        if (OwningPawn && GetPlayerAvatar() != OwningPawn)\n        {\n            OwningPawn->SetActorHiddenInGame(true);\n        }\n    }\n}\n}\n// removed-end\n// added-start\n    if (DialogueSequencePlayer)\n    {\n        if (ULevelSequencePlayer* SP = DialogueSequencePlayer->GetSequencePlayer())\n        {\n            if (CurrentDialogueSequence)\n            {\n                CurrentDialogueSequence->EndSequence();\n            }\n\n            SP->Stop();\n\n            /*\n            If your pawn has a dialogue avatar, narrative hides your pawn as you wouldn\'t want it to show up in a dialogue.\n            However a UE5 bug - Stop() will re-show player pawn even if it was already hidden - we want to keep it hidden*/\n            if (OwningPawn && GetPlayerAvatar() != OwningPawn)\n            {\n                OwningPawn->SetActorHiddenInGame(true);\n            }\n        }\n    }\n}\n}\n// added-end\n\n\n'})}),"\n",(0,r.jsx)(n.h3,{id:"questblueprintgeneratedclasscpp",children:"QuestBlueprintGeneratedClass.cpp"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-cpp",metastring:'title="/Narrative/Private/QuestBlueprintGeneratedClass.cpp" showLineNumbers',children:'\n#include "QuestBlueprintGeneratedClass.h"\n#include "Quest.h"\n// removed-start\n#include <QuestSM.h>\n// removed-end\n// added-start\n#include "QuestSM.h"\n// added-end\n\n...\n\n\n\n'})}),"\n",(0,r.jsx)(n.h3,{id:"questtaskcpp",children:"QuestTask.cpp"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-cpp",metastring:'title="/Narrative/Private/QuestTask.cpp" showLineNumbers',children:"\n#include \"Quest.h\"\n#include \"NarrativeComponent.h\"\n#include <TimerManager.h>\n// removed-start\n\n// removed-end\n\n...\n\n// removed-start\n    /*If we're loading OwningComp may be invalid as BeginTask hasnt cached it yet.\n    //If we're just loading a save, set the progress but don't bother updating any quest stuff except\n// removed-end\n// added-start\n    /*\n    //If we're loading a save, set the progress but don't bother updating any quest stuff except\n// added-end\n    //for on the current state (this is why we also check bIsActive)*/\n// removed-start\n    if (OwningComp->bIsLoading && !bIsActive)\n// removed-end\n// added-start\n    if (OwningComp->bIsLoading)\n// added-end\n    {\n        CurrentProgress = FMath::Clamp(NewProgress, 0, RequiredQuantity);\n// added-start\nif (!DescriptionOverride.IsEmptyOrWhitespace())\n{\n    return DescriptionOverride;\n}\n  \n// added-end\n\n...\n\n// removed-start\n#undef LOCTEXT_NAMESPACE// removed-end\n// added-start\n#undef LOCTEXT_NAMESPACE\n// added-end\n\n\n"})}),"\n",(0,r.jsx)(n.h3,{id:"narrativenodebasecpp",children:"NarrativeNodeBase.cpp"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-cpp",metastring:'title="/Narrative/Private/NarrativeNodeBase.cpp" showLineNumbers',children:"\n...\n\n    return;\n}\n\n// added-start\nconst bool bIsLoading = NarrativeComponent->bIsLoading;\n\n// added-end\n\n...\n\n// removed-start\n    if (Event && (Event->EventRuntime == Runtime || Event->EventRuntime == EEventRuntime::Both))\n// removed-end\n// added-start\n    if (Event)\n// added-end\n    {\n// removed-start\n        TArray<UNarrativeComponent*> CompsToExecute;\n// removed-end\n// added-start\n        const bool bShouldFire = (!bIsLoading || Event->bRefireOnLoad ) && (Event->EventRuntime == Runtime || Event->EventRuntime == EEventRuntime::Both);\n// added-end\n\n// removed-start\n        if (UNarrativePartyComponent* PartyComp = Cast<UNarrativePartyComponent>(NarrativeComponent))\n// removed-end\n// added-start\n        if (bShouldFire)\n// added-end\n        {\n// removed-start\n            if (Event->PartyEventPolicy == EPartyEventPolicy::AllPartyMembers)\n// removed-end\n// added-start\n            TArray<UNarrativeComponent*> CompsToExecute;\n\n            if (UNarrativePartyComponent* PartyComp = Cast<UNarrativePartyComponent>(NarrativeComponent))\n// added-end\n\n...\n\n// removed-start\n                CompsToExecute.Append(PartyComp->GetPartyMembers());\n// removed-end\n// added-start\n                if (Event->PartyEventPolicy == EPartyEventPolicy::AllPartyMembers)\n                {\n                    CompsToExecute.Append(PartyComp->GetPartyMembers());\n                }\n                else if (Event->PartyEventPolicy == EPartyEventPolicy::PartyLeader)\n                {\n                    CompsToExecute.Add(PartyComp->GetPartyLeader());\n                }\n                else if (Event->PartyEventPolicy == EPartyEventPolicy::Party)\n                {\n                    CompsToExecute.Add(PartyComp);\n                }\n// added-end\n            }\n// removed-start\n            else if (Event->PartyEventPolicy == EPartyEventPolicy::PartyLeader)\n// removed-end\n// added-start\n            else\n// added-end\n            {\n// removed-start\n                CompsToExecute.Add(PartyComp->GetPartyLeader());\n// removed-end\n// added-start\n                CompsToExecute.Add(NarrativeComponent);\n// added-end\n            }\n// removed-start\n            else if (Event->PartyEventPolicy == EPartyEventPolicy::Party)\n// removed-end\n// added-start\n\n            for (auto& Comp : CompsToExecute)\n// added-end\n\n...\n\n// removed-start\n                CompsToExecute.Add(PartyComp);\n// removed-end\n// added-start\n                Event->ExecuteEvent(Comp->GetOwningPawn(), Comp->GetOwningController(), Comp);\n// added-end\n            }\n        }\n// removed-start\n        else\n        {\n            CompsToExecute.Add(NarrativeComponent);\n        }\n\n        for (auto& Comp : CompsToExecute)\n        {\n            Event->ExecuteEvent(Comp->GetOwningPawn(), Comp->GetOwningController(), Comp);\n        }\n\n// removed-end\n    }\n\n...\n\n\n\n"})}),"\n",(0,r.jsx)(n.h3,{id:"narrativedialoguesequencecpp",children:"NarrativeDialogueSequence.cpp"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-cpp",metastring:'title="/Narrative/Private/NarrativeDialogueSequence.cpp" showLineNumbers',children:'\n...\n\n#include "NarrativeDialogueSequence.h"\n// added-start\n#include "Dialogue.h"\n// added-end\n\n...\n\n// removed-start\n#include "Dialogue.h"\n#include <Engine/TargetPoint.h>\n// removed-end\n\nstatic const FName NAME_AnchorTag("Anchor");\nstatic const FName NAME_CinecamTag("Cinecam");\n\n...\n\n// removed-start\nif ((LookAtTrackingSettings.bUpdateTrackingEveryFrame || FocusTrackingSettings.bUpdateTrackingEveryFrame) && Dialogue.IsValid() && SequenceActor.IsValid() && SequenceActor->SequencePlayer)\n// removed-end\n// added-start\nif ((LookAtTrackingSettings.bUpdateTrackingEveryFrame || FocusTrackingSettings.bUpdateTrackingEveryFrame) && Dialogue.IsValid() && SequenceActor.IsValid())\n// added-end\n{\n    if (Cinecam.IsValid())\n    {\n\n...\n\n// removed-start\n    InSequenceActor->SequencePlayer->Stop();\n// removed-end\n// added-start\n    if (InSequenceActor)\n    {\n        if (ULevelSequencePlayer* SP = InSequenceActor->GetSequencePlayer())\n        {\n            //Commented this out as in packaged builds starting the new sequence would cause another stop to be called which caused a crash in UE\'s sequence player \n            //SP->Stop();\n        }\n    }\n// added-end\n\n    AnchorActor = NewAnchorActor;\n    LookAtActor = NewLookAtActor;\n\n...\n\n// removed-start\nvoid UNarrativeDialogueSequence::EndSequence()\n{\t\n//No longer required, moved everything over to weak ptrs \n//Speaker = nullptr;\n//Listener = nullptr;\n//AnchorActor = nullptr;\n//LookAtActor = nullptr;\n//Dialogue = nullptr;\n//SequenceActor = nullptr;\n//Cinecam = nullptr;\n// removed-end\n// added-start\nvoid UNarrativeDialogueSequence::EndSequence_Implementation()\n{\n\n// added-end\n}\n\nvoid UNarrativeDialogueSequence::PlaySequence_Implementation()\n\n...\n\n// removed-start\n    if (SelectedSequence)\n// removed-end\n// added-start\n    if (SelectedSequence && SequenceActor.IsValid())\n// added-end\n    {\n        SequenceActor->PlaybackSettings = PlaybackSettings;\n        SequenceActor->SetSequence(SelectedSequence);\n\n...\n\n// removed-start\n        if (SequenceActor->SequencePlayer)\n// removed-end\n// added-start\n        if (ULevelSequencePlayer* SP = SequenceActor->GetSequencePlayer())\n// added-end\n        {\n            SequenceActor->bOverrideInstanceData = AnchorOriginRule != EAnchorOriginRule::AOR_Disabled;\n\n\n...\n\n// removed-start\n            SequenceActor->SequencePlayer->Play();\n// removed-end\n// added-start\n\n            SP->Play();\n// added-end\n\n            //Go in, and tell the cinecam to focus/track the speaker \n// removed-start\n            for (auto& BoundObject : SequenceActor->SequencePlayer->GetBoundObjects(SequenceActor->FindNamedBinding(NAME_CinecamTag)))\n// removed-end\n// added-start\n            for (auto& BoundObject : SP->GetBoundObjects(SequenceActor->FindNamedBinding(NAME_CinecamTag)))\n// added-end\n            {\n\n...\n\n\n\n'})}),"\n",(0,r.jsx)(n.h3,{id:"narrativefunctionlibrarycpp",children:"NarrativeFunctionLibrary.cpp"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-cpp",metastring:'title="/Narrative/Private/NarrativeFunctionLibrary.cpp" showLineNumbers',children:'\n...\n\n#include "NarrativeFunctionLibrary.h"\n// removed-start\n#include "Kismet/GameplayStatics.h"\n// removed-end\n// added-start\n#include "Kismet/GameplayStatics.h"\n// added-end\n\n...\n\n\n\n'})}),"\n",(0,r.jsx)(n.h3,{id:"narrativecomponentcpp",children:"NarrativeComponent.cpp"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-cpp",metastring:'title="/Narrative/Private/NarrativeComponent.cpp" showLineNumbers',children:'\n...\n\n#include "Quest.h"\n#include "NarrativeDataTask.h"\n#include "QuestSM.h"\n// added-start\n#include "DialogueSM.h"\n#include "Dialogue.h"\n#include "NarrativeCondition.h"\n#include "NarrativeEvent.h"\n#include "NarrativeDialogueSettings.h"\n#include "QuestTask.h"\n// added-end\n\n...\n\n// removed-start\n#include "DialogueSM.h"\n#include "Dialogue.h"\n#include "NarrativeCondition.h"\n#include "NarrativeEvent.h"\n#include "NarrativeDialogueSettings.h"\n#include "QuestTask.h"\n// removed-end\n\nDEFINE_LOG_CATEGORY(LogNarrative);\n// removed-start\n\nstatic TAutoConsoleVariable<bool> CVarShowQuestUpdates(\nTEXT("narrative.ShowQuestUpdates"),\nfalse,\nTEXT("Show updates to any of our quests on screen.\\n")\n);\n// removed-end\n\n\n...\n\n// removed-start\nbool UNarrativeComponent::HasDialogueAvailable(TSubclassOf<class UDialogue> DialogueClass, FName StartFromID /*= NAME_None*/)\n// removed-end\n// added-start\nbool UNarrativeComponent::HasDialogueAvailable(TSubclassOf<class UDialogue> DialogueClass, const FDialoguePlayParams PlayParams)\n// added-end\n{\nif (IsValid(DialogueClass))\n{\n// removed-start\n    return MakeDialogueInstance(DialogueClass, StartFromID) != nullptr;\n}\n\nreturn false;\n}\n\nbool UNarrativeComponent::SetCurrentDialogue(TSubclassOf<class UDialogue> Dialogue, FName StartFromID /*= NAME_None*/)\n// removed-end\n// added-start\n    return MakeDialogueInstance(DialogueClass, PlayParams) != nullptr;\n}\n\nreturn false;\n}\n\nbool UNarrativeComponent::SetCurrentDialogue(TSubclassOf<class UDialogue> Dialogue, const FDialoguePlayParams PlayParams)\n// added-end\n// added-start\n        //Check that our CurrentDialogue\'s priority isn\'t lower than the new one\n        if (UDialogue* NewDialogue = Dialogue->GetDefaultObject<UDialogue>())\n        {\n            const int32 NewPriority = PlayParams.Priority != -1 ? PlayParams.Priority : NewDialogue->Priority;\n\n            if (NewPriority > CurrentDialogue->Priority)\n            {\n                return false; \n            }\n        }\n\n// added-end\n\n...\n\n// removed-start\n    CurrentDialogue = MakeDialogueInstance(Dialogue, StartFromID);\n// removed-end\n// added-start\n    CurrentDialogue = MakeDialogueInstance(Dialogue, PlayParams);\n// added-end\n\n    return CurrentDialogue != nullptr;\n}\n\n...\n\n// removed-start\nbool UNarrativeComponent::BeginDialogue(TSubclassOf<class UDialogue> DialogueClass, FName StartFromID)\n// removed-end\n// added-start\nbool UNarrativeComponent::BeginDialogue(TSubclassOf<class UDialogue> DialogueClass, const FDialoguePlayParams PlayParams)\n// added-end\n{\nif (HasAuthority())\n{\n\n...\n\n// removed-start\n    if (SetCurrentDialogue(DialogueClass, StartFromID))\n// removed-end\n// added-start\n    if (SetCurrentDialogue(DialogueClass, PlayParams))\n// added-end\n    {\n        OnDialogueBegan.Broadcast(CurrentDialogue);\n\n// added-start\n        {\n// added-end\n// added-start\n        }\n// added-end\n\n...\n\n// removed-start\n        check(bSelected);\n// removed-end\n// added-start\n        if (!bSelected)\n        {\n            UE_LOG(LogTemp, Warning, TEXT("SelectDialogueOption returned false for option %s"), *GetNameSafe(Option));\n        }\n        //check(bSelected);\n// added-end\n    }\n}\n}\n\n...\n\n// removed-start\nclass UDialogue* UNarrativeComponent::MakeDialogueInstance(TSubclassOf<class UDialogue> DialogueClass, FName StartFromID /*= NAME_None*/)\n// removed-end\n// added-start\nclass UDialogue* UNarrativeComponent::MakeDialogueInstance(TSubclassOf<class UDialogue> DialogueClass, const FDialoguePlayParams PlayParams)\n// added-end\n{\nif (IsValid(DialogueClass))\n{\n\n...\n\n// removed-start\n        if (NewDialogue->Initialize(this, StartFromID))\n// removed-end\n// added-start\n        if (NewDialogue->Initialize(this, PlayParams))\n// added-end\n        {\n            return NewDialogue;\n        }\n\n...\n\n// removed-start\n//void UNarrativeComponent::OnRep_CurrentDialogue()\n//{\n//\tFString RoleString = HasAuthority() ? "Server" : "Client";\n//\n//\tUE_LOG(LogTemp, Warning, TEXT("dialogue %s started on %s"), *GetNameSafe(CurrentDialogue), *RoleString);\n//}\n//\n//void UNarrativeComponent::OnRep_QuestList()\n//{\n//\tFString RoleString = HasAuthority() ? "Server"  : "Client";\n//\n//\tfor (auto& Quest : QuestList)\n//\t{\n//\t\tUE_LOG(LogTemp, Warning, TEXT("Quest on %s: %s"), *RoleString, *GetNameSafe(Quest));\n//\t}\n//}\n\n// removed-end\nbool UNarrativeComponent::IsQuestValid(const UQuest* Quest, FString& OutError)\n{\n\n\n\n'})}),"\n",(0,r.jsx)(n.h3,{id:"narrativeeventcpp",children:"NarrativeEvent.cpp"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-cpp",metastring:'title="/Narrative/Private/NarrativeEvent.cpp" showLineNumbers',children:'\n...\n\n#include "NarrativeEvent.h"\n\n\n// removed-start\nbool UNarrativeEvent::ExecuteEvent_Implementation(APawn* Pawn, APlayerController* Controller, class UNarrativeComponent* NarrativeComponent)\n// removed-end\n// added-start\nUNarrativeEvent::UNarrativeEvent(const FObjectInitializer& ObjectInitializer) : Super(ObjectInitializer)\n// added-end\n\n...\n\n// removed-start\nreturn true;\n// removed-end\n// added-start\nbRefireOnLoad = true; \n}\n\nvoid UNarrativeEvent::ExecuteEvent_Implementation(APawn* Pawn, APlayerController* Controller, class UNarrativeComponent* NarrativeComponent)\n{\n\n// added-end\n}\n\nFString UNarrativeEvent::GetGraphDisplayText_Implementation()\n\n\n'})}),"\n",(0,r.jsx)(n.h3,{id:"dialogueh",children:"Dialogue.h"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-cpp",metastring:'title="/Narrative/Public/Dialogue.h" showLineNumbers',children:'\n#include "UObject/NoExportTypes.h"\n#include "LevelSequencePlayer.h"\n#include "DialogueSM.h"\n// removed-start\n#include <MovieSceneSequencePlayer.h>\n// removed-end\n// added-start\n#include "MovieSceneSequencePlayer.h"\n// added-end\n\n...\n\n// removed-start\n    SpeakerName = FText::GetEmpty();\n// removed-end\n    NodeColor = FLinearColor(0.036161, 0.115986,0.265625, 1.000000);\n\n    DefaultSpeakerShot = nullptr;\n// added-start\n    bIsPlayer = false;\n// added-end\n\n...\n\n// removed-start\n\n// removed-end\n// added-start\n\nFName GetSpeakerID() const { return SpeakerID; };\n\npublic:\n\nUPROPERTY()\nbool bIsPlayer;\n\n// added-end\n};\n\n/**Special speaker type created for the player*/\n// added-start\n\n    bIsPlayer = true;\n// added-end\n// added-start\n};\n\n\nUSTRUCT(BlueprintType)\nstruct NARRATIVE_API FDialoguePlayParams\n{\nGENERATED_BODY()\n\nFDialoguePlayParams()\n{\n    StartFromID = NAME_None;\n    Priority = -1;\n};\n\n//The ID the dialogue should start playing from, if empty will play from root node. \nUPROPERTY(EditAnywhere, BlueprintReadWrite, Category = "Play Params")\nFName StartFromID;\n\n//The priority we want to play this dialogue at. -1 means use the dialogues default priority. \nUPROPERTY(EditAnywhere, BlueprintReadWrite, Category = "Play Params")\nint32 Priority;\n// added-end\n\n...\n\n// removed-start\nvirtual bool Initialize(class UNarrativeComponent* InitializingComp, FName StartFromID);\n// removed-end\n// added-start\nvirtual bool Initialize(class UNarrativeComponent* InitializingComp, const FDialoguePlayParams PlayParams);\n// added-end\nvirtual void Deinitialize();\n\nvirtual void DuplicateAndInitializeFromDialogue(UDialogue* DialogueTemplate);\n// added-start\n//Priority. Lower values are more important. If a dialogue attempts to play with a higher priority it will be discarded. \nUPROPERTY(EditAnywhere, BlueprintReadOnly, Category = "Configuration")\nint32 Priority;\n\n// added-end\n// added-start\n/*\n* If enabled, we\'ll adjust the player to be at PlayerAutoAdjustTransform relative to the other speaker. Only used in 1 on 1 dialogue. \n*/\nUPROPERTY(EditAnywhere, BlueprintReadOnly, Category = "Adjustment")\nbool bAdjustPlayerTransform;\n\n//In 1-on-1 dialogue, we can automatically adjust your players position so they stand the desired amount of units away. \nUPROPERTY(EditAnywhere, BlueprintReadOnly, Category = "Adjustment", meta = (EditCondition="bAdjustPlayerTransform", EditConditionHides))\nFTransform PlayerAutoAdjustTransform;\n\n// added-end\n// added-start\n\n//The attenuation to use for dialogue lines\nUPROPERTY(EditAnywhere, BlueprintReadOnly, Category = "Audio")\nclass USoundAttenuation* DialogueSoundAttenuation;\n// added-end\n// added-start\n* Auto-adjust the player in 1-on-1 dialogue so we\'re standing in front of them even if we started talking in a different location \n*/\nUFUNCTION(BlueprintNativeEvent, Category = "Dialogue")\nvoid AdjustPlayerTransform();\nvirtual void AdjustPlayerTransform_Implementation();\n\n/**\n// added-end\n// added-start\n\n//Play params passed into us \nUPROPERTY()\nFDialoguePlayParams PlayParams;\n// added-end\n\n...\n\n// removed-start\n};\n// removed-end\n// added-start\n};// added-end\n\n\n'})}),"\n",(0,r.jsx)(n.h3,{id:"narrativeeventh",children:"NarrativeEvent.h"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-cpp",metastring:'title="/Narrative/Public/NarrativeEvent.h" showLineNumbers',children:'\n...\n\npublic:\n\n// added-start\nUNarrativeEvent(const FObjectInitializer& ObjectInitializer);\n\n// added-end\n// added-start\nWhen the game loads back in, should we fire this event off again?\n\nFor example, if we used a GiveXP event to give the player 500XP when we get to a certain quest state, this should be false.\nSince XP is saved already, quitting and reloading would grant 500XP on top of the previous amount, which is not what we want. \n\nOn the other hand, since NPC behavior isn\'t saved to disk, we want this to be true for all NPC behavior events - this way when your\nquest reloads it properly refires the event so your NPCs are ready to go when you come back to your game. \n*/\nUPROPERTY(EditAnywhere, BlueprintReadOnly, Category = "Event")\nbool bRefireOnLoad;\n\n/**\n// added-end\n\n...\n\n// removed-start\nbool ExecuteEvent(APawn* Pawn, APlayerController* Controller, class UNarrativeComponent* NarrativeComponent);\nvirtual bool ExecuteEvent_Implementation(APawn* Pawn, APlayerController* Controller, class UNarrativeComponent* NarrativeComponent);\n// removed-end\n// added-start\nvoid ExecuteEvent(APawn* Pawn, APlayerController* Controller, class UNarrativeComponent* NarrativeComponent);\nvirtual void ExecuteEvent_Implementation(APawn* Pawn, APlayerController* Controller, class UNarrativeComponent* NarrativeComponent);\n// added-end\n\n/**Define the text that will show up on a node if this event is added to it */\nUFUNCTION(BlueprintNativeEvent, BlueprintCallable, Category = "Event")\n\n\n'})}),"\n",(0,r.jsx)(n.h3,{id:"dialoguesmh",children:"DialogueSM.h"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-cpp",metastring:'title="/Narrative/Public/DialogueSM.h" showLineNumbers',children:'\n...\n\n#endif\n\n// removed-start\nTArray<class UDialogueNode_NPC*> GetNPCReplies(APlayerController* OwningController, APawn* OwningPawn, class UNarrativeComponent* NarrativeComponent);\n// removed-end\n// added-start\nclass UDialogueNode_NPC* GetFirstValidNPCReply(APlayerController* OwningController, APawn* OwningPawn, class UNarrativeComponent* NarrativeComponent);\n// added-end\n// added-start\n\nUFUNCTION(BlueprintCallable, Category = "NPC Dialogue Node")\nFName GetSpeakerID() const {return SpeakerID;}; \n\nvoid SetSpeakerID(const FName& NewID) { SpeakerID = NewID; };\n\n//Sequence to play when player is selecting their reply after this shot has played \nUPROPERTY(EditAnywhere, Instanced, BlueprintReadOnly, Category = "Details - NPC Dialogue Node")\nclass UNarrativeDialogueSequence* SelectingReplyShot;\n\n/**Grab this NPC node, appending all follow up responses to that node. Since multiple NPC replies can be linked together, \nwe need to grab the chain of replies the NPC has to say. */\nTArray<class UDialogueNode_NPC*> GetReplyChain(APlayerController* OwningController, APawn* OwningPawn, class UNarrativeComponent* NarrativeComponent);\n\nprotected:\n// added-end\n\n...\n\n// removed-start\n\n//Sequence to play when player is selecting their reply after this shot has played \nUPROPERTY(EditAnywhere, Instanced, BlueprintReadOnly, Category = "Details - NPC Dialogue Node")\nclass UNarrativeDialogueSequence* SelectingReplyShot;\n\n/**Grab this NPC node, appending all follow up responses to that node. Since multiple NPC replies can be linked together, \nwe need to grab the chain of replies the NPC has to say. */\nTArray<class UDialogueNode_NPC*> GetReplyChain(APlayerController* OwningController, APawn* OwningPawn, class UNarrativeComponent* NarrativeComponent);\n// removed-end\n\n};\n\n\n\n'})}),"\n",(0,r.jsx)(n.h3,{id:"questh",children:"Quest.h"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-cpp",metastring:'title="/Narrative/Public/Quest.h" showLineNumbers',children:'\n...\n\nprotected:\n\n// added-start\n//Called before tasks are ready - a good place to set up data tasks depend on \nUFUNCTION(BlueprintImplementableEvent, meta = (DisplayName="Pre Quest Started"))\n    void BPPreQuestStarted(const UQuest* Quest);\n\n// added-end\n\n...\n\n// removed-start\nvoid BPOnQuestTaskProgressChanged(const UQuest* Quest, const UNarrativeTask* Task, const class UQuestBranch* Step, int32 CurrentProgress, int32 RequiredProgress);\n// removed-end\n// added-start\n    void BPOnQuestTaskProgressChanged(const UQuest* Quest, const UNarrativeTask* Task, const class UQuestBranch* Step, int32 CurrentProgress, int32 RequiredProgress);\n// added-end\n\nUFUNCTION()\n    void OnQuestTaskCompleted(const UNarrativeTask* Task, const class UQuestBranch* Branch);\n// added-start\n\n//Tell the quest that it is tracked - by default this will enable the quests navigation markers. \nUFUNCTION(BlueprintCallable, Category = "Quest")\nvirtual void SetTracked(const bool bNewTracked);\n\nUFUNCTION(BlueprintImplementableEvent, meta = (DisplayName = "On Tracked Changed"))\nvoid BPOnTrackedChanged(const UQuest* Quest, const bool bNewTracked);\n// added-end\n// added-start\n\n//Whether or not the quest is marked as tracked. Use this to show or hide a quest \nUPROPERTY(EditAnywhere, BlueprintReadOnly, Category = "Quest Details")\nbool bTracked;\n// added-end\n// added-start\nUFUNCTION(BlueprintPure, Category = "Quests")\nFORCEINLINE bool IsTracked() const { return bTracked;};\n\n// added-end\n\n...\n\n\n\n'})}),"\n",(0,r.jsx)(n.h3,{id:"questtaskh",children:"QuestTask.h"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-cpp",metastring:'title="/Narrative/Public/QuestTask.h" showLineNumbers',children:"\n...\n\npublic:\n\n// removed-start\n/**Highly recommended to implement this function! It lets you autogenerate task descriptions that the editor UI and narrative UI will use,\n// removed-end\n// added-start\n/** Implement this if you want to autogenerate task descriptions that the editor UI and narrative UI will use,\n// added-end\n\n...\n\n// removed-start\n/** Optional special version of GetTaskDescription that is used for displaying info the editor nodes. \nIf you don't implement this function the nodes will just use GetTaskDescription instead. */\n// removed-end\n// added-start\n/** Optional special version of GetTaskDescription that is used for displaying info the editor nodes,\nbut won't be used for ingame descriptions. */\n// added-end\nUFUNCTION(BlueprintNativeEvent, BlueprintCallable, Category = \"Editor\")\nFText GetTaskNodeDescription() const;\nvirtual FText GetTaskNodeDescription_Implementation() const;\n\n\n"})}),"\n",(0,r.jsx)(n.h3,{id:"dialogueblueprintgeneratedclassh",children:"DialogueBlueprintGeneratedClass.h"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-cpp",metastring:'title="/Narrative/Public/DialogueBlueprintGeneratedClass.h" showLineNumbers',children:'\n...\n\n#include "CoreMinimal.h"\n#include "Engine/BlueprintGeneratedClass.h"\n// added-start\n#include "UObject/Package.h"\n// added-end\n\n...\n\n\n\n'})}),"\n",(0,r.jsx)(n.h3,{id:"narrativepartycomponenth",children:"NarrativePartyComponent.h"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-cpp",metastring:'title="/Narrative/Public/NarrativePartyComponent.h" showLineNumbers',children:"\n...\n\npublic:\n\n// removed-start\nvirtual bool BeginDialogue(TSubclassOf<class UDialogue> Dialogue, FName StartFromID = NAME_None) override;\n// removed-end\n// added-start\nvirtual bool BeginDialogue(TSubclassOf<class UDialogue> Dialogue, const FDialoguePlayParams PlayParams = FDialoguePlayParams()) override;\n// added-end\n\n...\n\n// removed-start\n};\n// removed-end\n// added-start\n};// added-end\n\n\n"})}),"\n",(0,r.jsx)(n.h3,{id:"narrativecomponenth",children:"NarrativeComponent.h"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-cpp",metastring:'title="/Narrative/Public/NarrativeComponent.h" showLineNumbers',children:'\n...\n\n#include "CoreMinimal.h"\n#include "UObject/TextProperty.h" //Fixes a build error complaining about incomplete type UTextProperty\n#include "Components/ActorComponent.h"\n// removed-start\n\n// removed-end\n\n...\n\n// removed-start\n\n// removed-end\n//Narrative makes a point to expose everything via delegates so your game can update your UI, or do whatever it needs to do when an update happens. \n\n//General\n\n...\n\n// removed-start\n\n// removed-end\npublic:\n\nUFUNCTION(BlueprintPure, Category = "Narrative")\n\n...\n\n// removed-start\nvirtual bool HasDialogueAvailable(TSubclassOf<class UDialogue> Dialogue, FName StartFromID = NAME_None);\n// removed-end\n// added-start\nvirtual bool HasDialogueAvailable(TSubclassOf<class UDialogue> Dialogue, const FDialoguePlayParams PlayParams = FDialoguePlayParams());\n// added-end\n\n/**Sets CurrentDialogue to the given dialogue class, cleaning up our existing dialogue if one is going. Won\'t actually begin playing the dialogue. */\n// removed-start\nvirtual bool SetCurrentDialogue(TSubclassOf<class UDialogue> Dialogue, FName StartFromID = NAME_None);\n// removed-end\n// added-start\nvirtual bool SetCurrentDialogue(TSubclassOf<class UDialogue> Dialogue, const FDialoguePlayParams PlayParams = FDialoguePlayParams());\n// added-end\n\n\n...\n\n// removed-start\nvirtual bool BeginDialogue(TSubclassOf<class UDialogue> Dialogue, FName StartFromID = NAME_None);\n// removed-end\n// added-start\nvirtual bool BeginDialogue(TSubclassOf<class UDialogue> Dialogue, const FDialoguePlayParams PlayParams = FDialoguePlayParams());\n// added-end\n\n/**Used by the server to tell client to start dialogue. Also sends the initial chunk*/\nUFUNCTION(Client, Reliable, Category = "Dialogues")\n\n...\n\n// removed-start\nvirtual class UDialogue* MakeDialogueInstance(TSubclassOf<class UDialogue> DialogueClass, FName StartFromID = NAME_None);\n// removed-end\n// added-start\nvirtual class UDialogue* MakeDialogueInstance(TSubclassOf<class UDialogue> DialogueClass, const FDialoguePlayParams PlayParams = FDialoguePlayParams());\n// added-end\n\n\npublic:\n\n...\n\n// removed-start\n};\n// removed-end\n// added-start\n};// added-end\n\n\n'})}),"\n",(0,r.jsx)(n.h3,{id:"narrativedialoguesequenceh",children:"NarrativeDialogueSequence.h"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-cpp",metastring:'title="/Narrative/Public/NarrativeDialogueSequence.h" showLineNumbers',children:'\n...\n\n    UNarrativeDialogueSequence();\n\n// added-start\n\n    // Allows the Object to get a valid UWorld from it\'s outer.\n    virtual UWorld* GetWorld() const override\n    {\n        if (HasAllFlags(RF_ClassDefaultObject))\n        {\n            // If we are a CDO, we must return nullptr instead of calling Outer->GetWorld() to fool UObject::ImplementsGetWorld.\n            return nullptr;\n        }\n\n        UObject* Outer = GetOuter();\n\n        while (Outer)\n        {\n            UWorld* World = Outer->GetWorld();\n            if (World)\n            {\n                return World;\n            }\n\n            Outer = Outer->GetOuter();\n        }\n\n        return nullptr;\n    }\n\n\n// added-end\n\n...\n\n// removed-start\n    virtual void EndSequence();\n// removed-end\n\n    FORCEINLINE TArray<class ULevelSequence*> GetSequenceAssets() const { return SequenceAssets;}\n    FORCEINLINE FMovieSceneSequencePlaybackSettings GetPlaybackSettings() const {return PlaybackSettings;}\n// added-start\n\n    //Called before the shot is stopped and its sequence player is de-initialized. \n    UFUNCTION(BlueprintCallable, BlueprintImplementableEvent, Category = "Dialogue Sequence")\n    void OnStop();\n\n    /** Plays the level sequence. Pretty rare you\'d ever want to override this in BP but the option is there! */\n    UFUNCTION(BlueprintNativeEvent, BlueprintCallable, Category = "Dialogue Sequence")\n    void EndSequence();\n    virtual void EndSequence_Implementation();\n// added-end\n\n...\n\n'})})]})}function p(e={}){const{wrapper:n}={...(0,d.R)(),...e.components};return n?(0,r.jsx)(n,{...e,children:(0,r.jsx)(u,{...e})}):u(e)}}}]);